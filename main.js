(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>T,F5:()=>v,k3:()=>h,HA:()=>E,QP:()=>U,mo:()=>g});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const a=[];for(let e=0;e<256;++e)a.push((e+256).toString(16).slice(1));const l=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const l=(e=e||{}).random||(e.rng||d)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=l[e];return n}return function(e,t=0){return a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]}(l)};function r(e,t,n,o){let d=l(),a=!1;const r=()=>a;e=e.toString(),t=t.toString();const i=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:r,setComplete:()=>{a=0==r()},changePriority:i,editTask:(o,d,a,l)=>{e=o,t=d,n=a,i(l)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function i(e){let t=l(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function s(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),a=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,a.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(a),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;h(t.value),t.parentNode.remove()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(e){const t=document.getElementById("edit-form"),n=document.createElement("button");n.classList.add("edit-btn-id"),n.value=e.target.value,t.appendChild(n),function(e){const t=document.getElementById("edit-form"),n=t.elements["task-title"],o=t.elements["task-description"],d=t.elements["task-due-date"],a=t.elements["task-priority"];n.value=e.title,o.value=e.description,d.value=e.dueDate,a.value=e.priority}(U(e.target.value)),g().showModal()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){T(e.target.value)})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function c(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;v(t.value),t.parentNode.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return E(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);document.querySelector(".sidebar").appendChild(t)}const u=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}(),m=i("Inbox"),f=r("chores","wash dishes","nov 23","high"),p=r("movies","avatar","nov 29","med"),k=r("coding","todo list","dec 10","low");function y(){return document.getElementById("task-dialog")}function g(){return document.getElementById("edit-dialog")}function E(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",s(t),console.log("match found"))}))}function v(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),u.deleteFolder(t))}))}function h(e){u.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function T(e){u.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))}))}function U(e){let t;return u.folders.forEach((n=>{n.tasks.forEach((n=>{e===n.myTaskUuid&&(t=n)}))})),t}f.editTask("new thing","another new thing",new Date,"HIGH"),m.addTask(k),m.addTask(p),m.addTask(f),m.displayTasks(),u.addFolder(m),console.log(u),document.getElementById("open-task-modal-btn").addEventListener("click",(function(){y().reset,y().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(u)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);c(o),u.addFolder(o),console.log(u.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:a}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),l=r(n,o,d,a);u.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(l)})),E(t),document.getElementById("main-form").reset(),y().close()})),document.getElementById("task-edit-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".edit-btn-id"),{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:a}=function(){const e=document.getElementById("edit-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}();u.folders.forEach((e=>{e.tasks.forEach((l=>{t.value===l.myTaskUuid&&(l.editTask(n,o,d,a),E(e.myFolderUuid),console.log(l))}))})),t.remove(),g().close()}));let C=i("test");C.addTask(f),u.addFolder(C),c(C);let I=i("test2");I.addTask(p),I.addTask(f),I.addTask(k),I.deleteTask(p),u.addFolder(I),c(I),console.log(I)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,