(()=>{"use strict";function t(){const t=document.getElementById("main-form"),e=t.elements["task-title"],s=t.elements["task-description"],n=t.elements["task-due-date"],a=t.elements["task-priority"];let o=e.value,i=s.value,r=n.value,l=a.value;return console.log(o),console.log("dom works"),{taskTitle:o,taskDescription:i,taskDueDate:r,taskPriority:l}}function e(t,e,s,n){t=t.toString(),e=e.toString();const a=t=>{n=t};return{get title(){return t},get description(){return e},get dueDate(){return s},get priority(){return n},changePriority:a,editTask:(n,o,i,r)=>{t=n,e=o,s=i,a(r)},printTask:()=>{console.log(`Task title - ${t}, Desc - ${e}, Date - ${s}, Priority - ${n}`)}}}function s(t){let e=[];return{title:t,tasks:e,addTask:t=>{e.push(t)},displayTasks:()=>{for(let t=0;t<e.length;t++)console.log(`Task ${t} - ${e[t].title}, ${e[t].dueDate}, ${e[t].priority}`)},deleteTask:t=>{e.splice(t,1)}}}const n=s("Inbox"),a=e("chores","wash dishes","nov 23","high"),o=e("movies","avatar","nov 29","med"),i=e("coding","todo list","dec 10","low"),r=s("project 1");s("project 2"),a.editTask("new thing","another new thing","new date","HIGH"),r.addTask(a),a.printTask(),r.addTask(o),r.displayTasks(),r.deleteTask(1),r.displayTasks(),n.addTask(i),n.displayTasks();const l=document.getElementById("add-btn");document.getElementById("dialog").show(),l.addEventListener("click",(function(){t();const s=e(t().taskTitle,t().taskDescription,t().taskDueDate,t().taskPriority);console.log(s.printTask())})),t()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQUEsU0FBU0EsSUFDTCxNQUFNQyxFQUFPQyxTQUFTQyxlQUFlLGFBRS9CQyxFQUFrQkgsRUFBS0ksU0FBUyxjQUNoQ0MsRUFBd0JMLEVBQUtJLFNBQVMsb0JBQ3RDRSxFQUFvQk4sRUFBS0ksU0FBUyxpQkFDbENHLEVBQXFCUCxFQUFLSSxTQUFTLGlCQUV6QyxJQUFJSSxFQUFZTCxFQUFnQk0sTUFDNUJDLEVBQWtCTCxFQUFzQkksTUFDeENFLEVBQWNMLEVBQWtCRyxNQUNoQ0csRUFBZUwsRUFBbUJFLE1BS3RDLE9BSEFJLFFBQVFDLElBQUlOLEdBQ1pLLFFBQVFDLElBQUksYUFFTCxDQUFDTixZQUFXRSxrQkFBaUJDLGNBQWFDLGVBQ3JELENDWEEsU0FBU0csRUFBS0MsRUFBT0MsRUFBYUMsRUFBU0MsR0FFdkNILEVBQVFBLEVBQU1JLFdBQ2RILEVBQWNBLEVBQVlHLFdBRTFCLE1BQU1DLEVBQWtCQyxJQUNwQkgsRUFBV0csQ0FBVyxFQWMxQixNQUFPLENBQ0gsU0FBSU4sR0FBUyxPQUFPQSxDQUFLLEVBQ3pCLGVBQUlDLEdBQWUsT0FBT0EsQ0FBVyxFQUNyQyxXQUFJQyxHQUFXLE9BQU9BLENBQU8sRUFDN0IsWUFBSUMsR0FBWSxPQUFPQSxDQUFTLEVBQ2hDRSxpQkFDQUUsU0FqQmEsQ0FBQ0MsRUFBVUMsRUFBZ0JDLEVBQVlKLEtBQ3BETixFQUFRUSxFQUNSUCxFQUFjUSxFQUNkUCxFQUFVUSxFQUNWTCxFQUFlQyxFQUFZLEVBYzNCSyxVQVhjLEtBQ2RkLFFBQVFDLElBQUksZ0JBQWdCRSxhQUFpQkMsYUFBdUJDLGlCQUF1QkMsSUFBVyxFQVk5RyxDQUdBLFNBQVNTLEVBQU9aLEdBQ1osSUFBSWEsRUFBUSxHQWlCWixNQUFPLENBQUNiLFFBQU9hLFFBQU9DLFFBZkxDLElBQ2JGLEVBQU1HLEtBQUtELEVBQVksRUFjSUUsYUFYVixLQUNqQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUwsRUFBTU0sT0FBUUQsSUFDOUJyQixRQUFRQyxJQUFJLFFBQVFvQixPQUFPTCxFQUFNSyxHQUFHbEIsVUFBVWEsRUFBTUssR0FBR2hCLFlBQVlXLEVBQU1LLEdBQUdmLFdBQ2hGLEVBUXlDaUIsV0FMekJDLElBQ2hCUixFQUFNUyxPQUFPRCxFQUFPLEVBQUUsRUFLOUIsQ0FHQSxNQUFNRSxFQUFhWCxFQUFPLFNBR3BCWSxFQUFRekIsRUFBSyxTQUFVLGNBQWUsU0FBVSxRQUNoRDBCLEVBQVExQixFQUFLLFNBQVUsU0FBVSxTQUFVLE9BQzNDMkIsRUFBUTNCLEVBQUssU0FBVSxZQUFhLFNBQVUsT0FHOUM0QixFQUFRZixFQUFPLGFBQ1BBLEVBQU8sYUFFckJZLEVBQU1qQixTQUFTLFlBQWEsb0JBQXFCLFdBQVksUUFJN0RvQixFQUFNYixRQUFRVSxHQUNkQSxFQUFNYixZQUNOZ0IsRUFBTWIsUUFBUVcsR0FDZEUsRUFBTVYsZUFDTlUsRUFBTVAsV0FBVyxHQUNqQk8sRUFBTVYsZUFDTk0sRUFBV1QsUUFBUVksR0FDbkJILEVBQVdOLGVBRVgsTUFBTVcsRUFBUzNDLFNBQVNDLGVBQWUsV0FFeEJELFNBQVNDLGVBQWUsVUFDaEMyQyxPQUVQRCxFQUFPRSxpQkFBaUIsU0FBUyxXQUNkL0MsSUFPZixNQUFNZ0QsRUFBV2hDLEVBTExoQixJQUFjUyxVQUNmVCxJQUFjVyxnQkFDWFgsSUFBY1ksWUFDYlosSUFBY2EsY0FHN0JDLFFBQVFDLElBQUlpQyxFQUFTcEIsWUFDekIsSUFFQTVCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZG9tLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRGb3JtSW5mbygpIHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4tZm9ybScpO1xuXG4gICAgY29uc3QgdGFza1RpdGxlSW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay10aXRsZSddO1xuICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbkluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZGVzY3JpcHRpb24nXTtcbiAgICBjb25zdCB0YXNrRHVlRGF0ZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZHVlLWRhdGUnXTtcbiAgICBjb25zdCB0YXNrUHJpb3JpdHlJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLXByaW9yaXR5J107XG4gICAgXG4gICAgbGV0IHRhc2tUaXRsZSA9IHRhc2tUaXRsZUluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza0Rlc2NyaXB0aW9uID0gdGFza0Rlc2NyaXB0aW9uSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrRHVlRGF0ZSA9IHRhc2tEdWVEYXRlSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrUHJpb3JpdHkgPSB0YXNrUHJpb3JpdHlJbkZvcm0udmFsdWU7XG5cbiAgICBjb25zb2xlLmxvZyh0YXNrVGl0bGUpXG4gICAgY29uc29sZS5sb2coJ2RvbSB3b3JrcycpO1xuICAgIFxuICAgIHJldHVybiB7dGFza1RpdGxlLCB0YXNrRGVzY3JpcHRpb24sIHRhc2tEdWVEYXRlLCB0YXNrUHJpb3JpdHl9O1xufSBcbiAgICBcblxuXG5mdW5jdGlvbiBhZGRUYXNrVG9Eb20odGl0bGUsIGRlc2MsIGRhdGUsIHByaW9yaXR5KSB7XG4gICAgY29uc3QgdGVzdERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWNvbnRhaW5lcicpO1xuXG4gICAgdGl0bGUgPSB0YXNrVGl0bGU7XG4gICAgdGVzdERpdi50ZXh0Q29udGVudCA9IHRpdGxlO1xufVxuXG5leHBvcnQge1xuICAgIGdldEZvcm1JbmZvLFxuICAgIGFkZFRhc2tUb0RvbVxufSIsImltcG9ydCB7XG4gICAgZ2V0Rm9ybUluZm8sXG4gICAgYWRkVGFza1RvRG9tXG59IGZyb20gJy4vZG9tLmpzJztcblxuLy8gRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgYSB0b2RvIHRhc2tcbmZ1bmN0aW9uIFRhc2sodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuXG4gICAgdGl0bGUgPSB0aXRsZS50b1N0cmluZygpO1xuICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24udG9TdHJpbmcoKTtcblxuICAgIGNvbnN0IGNoYW5nZVByaW9yaXR5ID0gKG5ld1ByaW9yaXR5KSA9PiB7XG4gICAgICAgIHByaW9yaXR5ID0gbmV3UHJpb3JpdHk7XG4gICAgfVxuXG4gICAgY29uc3QgZWRpdFRhc2sgPSAobmV3VGl0bGUsIG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSkgPT4ge1xuICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICBkdWVEYXRlID0gbmV3RHVlRGF0ZTtcbiAgICAgICAgY2hhbmdlUHJpb3JpdHkobmV3UHJpb3JpdHkpO1xuICAgIH1cblxuICAgIGNvbnN0IHByaW50VGFzayA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFRhc2sgdGl0bGUgLSAke3RpdGxlfSwgRGVzYyAtICR7ZGVzY3JpcHRpb259LCBEYXRlIC0gJHtkdWVEYXRlfSwgUHJpb3JpdHkgLSAke3ByaW9yaXR5fWApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldCB0aXRsZSgpIHtyZXR1cm4gdGl0bGV9LCBcbiAgICAgICAgZ2V0IGRlc2NyaXB0aW9uKCkge3JldHVybiBkZXNjcmlwdGlvbn0sIFxuICAgICAgICBnZXQgZHVlRGF0ZSgpIHtyZXR1cm4gZHVlRGF0ZX0sIFxuICAgICAgICBnZXQgcHJpb3JpdHkoKSB7cmV0dXJuIHByaW9yaXR5O30sIFxuICAgICAgICBjaGFuZ2VQcmlvcml0eSxcbiAgICAgICAgZWRpdFRhc2ssXG4gICAgICAgIHByaW50VGFza1xuICAgIH07XG59O1xuXG5cbmZ1bmN0aW9uIEZvbGRlcih0aXRsZSkge1xuICAgIGxldCB0YXNrcyA9IFtdO1xuXG4gICAgY29uc3QgYWRkVGFzayA9IChuZXdUYXNrTmFtZSkgPT4ge1xuICAgICAgICB0YXNrcy5wdXNoKG5ld1Rhc2tOYW1lKTtcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwbGF5VGFza3MgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYXNrICR7aX0gLSAke3Rhc2tzW2ldLnRpdGxlfSwgJHt0YXNrc1tpXS5kdWVEYXRlfSwgJHt0YXNrc1tpXS5wcmlvcml0eX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZVRhc2sgPSAoaW5kZXgpID0+IHtcbiAgICAgICAgdGFza3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBcbiAgICByZXR1cm4ge3RpdGxlLCB0YXNrcywgYWRkVGFzaywgZGlzcGxheVRhc2tzLCBkZWxldGVUYXNrfTtcbn1cblxuLy8gTWFpbiBGb2xkZXIgdGhhdCB0YXNrcyB3aWxsIGdvIGludG9cbmNvbnN0IG1haW5Gb2xkZXIgPSBGb2xkZXIoJ0luYm94Jyk7XG5cbi8vIFRlc3QgdGFza3NcbmNvbnN0IHRhc2sxID0gVGFzaygnY2hvcmVzJywgJ3dhc2ggZGlzaGVzJywgJ25vdiAyMycsICdoaWdoJyk7XG5jb25zdCB0YXNrMiA9IFRhc2soJ21vdmllcycsICdhdmF0YXInLCAnbm92IDI5JywgJ21lZCcpO1xuY29uc3QgdGFzazMgPSBUYXNrKCdjb2RpbmcnLCAndG9kbyBsaXN0JywgJ2RlYyAxMCcsICdsb3cnKTtcblxuLy8gVGVzdCBmb2xkZXJzXG5jb25zdCBwcm9qMSA9IEZvbGRlcihcInByb2plY3QgMVwiKTtcbmNvbnN0IHByb2oyID0gRm9sZGVyKCdwcm9qZWN0IDInKTtcblxudGFzazEuZWRpdFRhc2soJ25ldyB0aGluZycsICdhbm90aGVyIG5ldyB0aGluZycsICduZXcgZGF0ZScsICdISUdIJyk7XG4vLyBjb25zb2xlLmxvZyhwcm9qMS50YXNrc1swXS5wcmludFRhc2soKSk7XG5cbi8vIFRlc3RpbmcgZnVuY3Rpb25hbGl0aWVzXG5wcm9qMS5hZGRUYXNrKHRhc2sxKTtcbnRhc2sxLnByaW50VGFzaygpO1xucHJvajEuYWRkVGFzayh0YXNrMik7XG5wcm9qMS5kaXNwbGF5VGFza3MoKTtcbnByb2oxLmRlbGV0ZVRhc2soMSlcbnByb2oxLmRpc3BsYXlUYXNrcygpO1xubWFpbkZvbGRlci5hZGRUYXNrKHRhc2szKTtcbm1haW5Gb2xkZXIuZGlzcGxheVRhc2tzKCk7XG5cbmNvbnN0IGFkZEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtYnRuJyk7XG5cbmNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaWFsb2cnKTtcbmRpYWxvZy5zaG93KCk7XG5cbmFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGxldCBmb3JtSW5mbyA9IGdldEZvcm1JbmZvKCk7XG5cbiAgICBsZXQgdGl0bGUgPSBnZXRGb3JtSW5mbygpLnRhc2tUaXRsZTtcbiAgICBsZXQgZGVzYyA9IGdldEZvcm1JbmZvKCkudGFza0Rlc2NyaXB0aW9uO1xuICAgIGxldCBkdWVEYXRlID0gZ2V0Rm9ybUluZm8oKS50YXNrRHVlRGF0ZTtcbiAgICBsZXQgcHJpb3JpdHkgPSBnZXRGb3JtSW5mbygpLnRhc2tQcmlvcml0eTtcblxuICAgIGNvbnN0IHRlc3RUYXNrID0gVGFzayh0aXRsZSwgZGVzYywgZHVlRGF0ZSwgcHJpb3JpdHkpO1xuICAgIGNvbnNvbGUubG9nKHRlc3RUYXNrLnByaW50VGFzaygpKTtcbn0pXG5cbmdldEZvcm1JbmZvKCk7XG4vLyBhZGRUYXNrVG9Eb20oJ3Rlc3RpbmcnKTtcbi8vIGdldEluZm9Gcm9tRm9ybSgpO1xuLy8gYWRkRG9tVGFzaygpO1xuIl0sIm5hbWVzIjpbImdldEZvcm1JbmZvIiwiZm9ybSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0YXNrVGl0bGVJbkZvcm0iLCJlbGVtZW50cyIsInRhc2tEZXNjcmlwdGlvbkluRm9ybSIsInRhc2tEdWVEYXRlSW5Gb3JtIiwidGFza1ByaW9yaXR5SW5Gb3JtIiwidGFza1RpdGxlIiwidmFsdWUiLCJ0YXNrRGVzY3JpcHRpb24iLCJ0YXNrRHVlRGF0ZSIsInRhc2tQcmlvcml0eSIsImNvbnNvbGUiLCJsb2ciLCJUYXNrIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsInRvU3RyaW5nIiwiY2hhbmdlUHJpb3JpdHkiLCJuZXdQcmlvcml0eSIsImVkaXRUYXNrIiwibmV3VGl0bGUiLCJuZXdEZXNjcmlwdGlvbiIsIm5ld0R1ZURhdGUiLCJwcmludFRhc2siLCJGb2xkZXIiLCJ0YXNrcyIsImFkZFRhc2siLCJuZXdUYXNrTmFtZSIsInB1c2giLCJkaXNwbGF5VGFza3MiLCJpIiwibGVuZ3RoIiwiZGVsZXRlVGFzayIsImluZGV4Iiwic3BsaWNlIiwibWFpbkZvbGRlciIsInRhc2sxIiwidGFzazIiLCJ0YXNrMyIsInByb2oxIiwiYWRkQnRuIiwic2hvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0ZXN0VGFzayJdLCJzb3VyY2VSb290IjoiIn0=