(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{F5:()=>h,k3:()=>E,HA:()=>g});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const r=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const r=(e=e||{}).random||(e.rng||d)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=r[e];return n}return function(e,t=0){return l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]}(r)};function a(e,t,n,o){let d=r(),l=!1;e=e.toString(),t=t.toString();const a=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:()=>l,setComplete:()=>{l=!0},changePriority:a,editTask:(o,d,l,r)=>{e=o,t=d,n=l,a(r)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function i(e){let t=r(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function c(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),l=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,l.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(l),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;E(t.value),t.parentNode.remove()})),t}(t)).value=e.myTaskUuid,function(e){const t=document.createElement("button");t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(){}))}(t),t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function s(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;h(t.value),t.parentNode.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return g(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);document.querySelector(".sidebar").appendChild(t)}const u=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}(),m=i("Inbox"),f=a("chores","wash dishes","nov 23","high"),p=a("movies","avatar","nov 29","med"),y=a("coding","todo list","dec 10","low");function k(){return document.getElementById("task-dialog")}function g(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",c(t),console.log("match found"))}))}function h(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),u.deleteFolder(t))}))}function E(e){u.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))})),console.log(T)}f.editTask("new thing","another new thing","new date","HIGH"),m.addTask(y),m.addTask(p),m.addTask(f),m.displayTasks(),u.addFolder(m),console.log(u),document.getElementById("open-task-modal-btn").addEventListener("click",(function(){k().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(u)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);s(o),u.addFolder(o),console.log(u.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),r=a(n,o,d,l);u.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(r)})),g(t),console.log(v),document.getElementById("main-form").reset(),k().close()}));let v=i("test");v.addTask(f),u.addFolder(v),s(v);let T=i("test2");T.addTask(p),T.addTask(f),T.addTask(y),T.deleteTask(p),u.addFolder(T),s(T),console.log(T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixRQUFRQyxJQUFJZ0csR0FHSzlFLFNBQVN1QixlQUFlLGFBQ2hDd0QsUUFDVC9CLElBQWdCaUIsT0FDcEIsSUF1QkEsSUFBSWEsRUFBYS9GLEVBQU8sUUFDeEIrRixFQUFXNUYsUUFBUTJELEdBQ25CUCxFQUFZRSxVQUFVc0MsR0FDdEJyRCxFQUFhcUQsR0FFYixJQUFJM0IsRUFBY3BFLEVBQU8sU0FDekJvRSxFQUFZakUsUUFBUTRELEdBQ3BCSyxFQUFZakUsUUFBUTJELEdBQ3BCTSxFQUFZakUsUUFBUTZELEdBQ3BCSSxFQUFZN0QsV0FBV3dELEdBQ3ZCUixFQUFZRSxVQUFVVyxHQUN0QjFCLEVBQWEwQixHQUVidEUsUUFBUUMsSUFBSXFFLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2ZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRFxufTsiLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbmxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCB7djQgYXMgdXVpZHY0fSBmcm9tICd1dWlkJztcblxuZXhwb3J0IGZ1bmN0aW9uIFRhc2sodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuXG4gICAgbGV0IG15VGFza1V1aWQgPSB1dWlkdjQoKTtcblxuICAgIGxldCBjb21wbGV0ZVN0YXRlID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXRDb21wbGV0ZVN0YXRlID0gKCkgPT4gY29tcGxldGVTdGF0ZTtcblxuICAgIGNvbnN0IHNldENvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICBjb21wbGV0ZVN0YXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgdGl0bGUgPSB0aXRsZS50b1N0cmluZygpO1xuICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24udG9TdHJpbmcoKTtcblxuICAgIGNvbnN0IGNoYW5nZVByaW9yaXR5ID0gKG5ld1ByaW9yaXR5KSA9PiB7XG4gICAgICAgIHByaW9yaXR5ID0gbmV3UHJpb3JpdHk7XG4gICAgfVxuXG4gICAgY29uc3QgZWRpdFRhc2sgPSAobmV3VGl0bGUsIG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSkgPT4ge1xuICAgICAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICBkZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICBkdWVEYXRlID0gbmV3RHVlRGF0ZTtcbiAgICAgICAgY2hhbmdlUHJpb3JpdHkobmV3UHJpb3JpdHkpO1xuICAgIH1cblxuICAgIGNvbnN0IHByaW50VGFzayA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFRhc2sgdGl0bGUgLSAke3RpdGxlfSwgRGVzYyAtICR7ZGVzY3JpcHRpb259LCBEYXRlIC0gJHtkdWVEYXRlfSwgUHJpb3JpdHkgLSAke3ByaW9yaXR5fWApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldCB0aXRsZSgpIHtyZXR1cm4gdGl0bGV9LCBcbiAgICAgICAgZ2V0IGRlc2NyaXB0aW9uKCkge3JldHVybiBkZXNjcmlwdGlvbn0sIFxuICAgICAgICBnZXQgZHVlRGF0ZSgpIHtyZXR1cm4gZHVlRGF0ZX0sIFxuICAgICAgICBnZXQgcHJpb3JpdHkoKSB7cmV0dXJuIHByaW9yaXR5fSxcbiAgICAgICAgZ2V0Q29tcGxldGVTdGF0ZSxcbiAgICAgICAgc2V0Q29tcGxldGUsIFxuICAgICAgICBjaGFuZ2VQcmlvcml0eSxcbiAgICAgICAgZWRpdFRhc2ssXG4gICAgICAgIHByaW50VGFzayxcbiAgICAgICAgbXlUYXNrVXVpZFxuICAgIH07XG59O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBGb2xkZXIodGl0bGUpIHtcbiAgICBcblxuICAgIGxldCBteUZvbGRlclV1aWQgPSB1dWlkdjQoKTtcbiAgICBsZXQgdGFza3MgPSBbXTtcblxuICAgIGNvbnN0IGFkZFRhc2sgPSAobmV3VGFza05hbWUpID0+IHtcbiAgICAgICAgdGFza3MucHVzaChuZXdUYXNrTmFtZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGxheVRhc2tzID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFzayAke2l9IC0gJHt0YXNrc1tpXS50aXRsZX0sICR7dGFza3NbaV0uZHVlRGF0ZX0sICR7dGFza3NbaV0ucHJpb3JpdHl9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkZWxldGVUYXNrID0gKHRhc2tOYW1lKSA9PiB7XG4gICAgICAgIC8vIHRhc2tzLnNwbGljZSh0YXNrTmFtZSwgMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSB0YXNrcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgaWYgKHRhc2tzW2ldLm15VGFza1V1aWQgPT09IHRhc2tOYW1lLm15VGFza1V1aWQpIHtcbiAgICAgICAgICAgICAgICB0YXNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbiAgICByZXR1cm4ge3RpdGxlLCB0YXNrcywgbXlGb2xkZXJVdWlkLCBhZGRUYXNrLCBkaXNwbGF5VGFza3MsIGRlbGV0ZVRhc2t9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3VwZXJGb2xkZXIoKSB7XG4gICAgbGV0IGZvbGRlcnMgPSBbXVxuXG4gICAgY29uc3QgYWRkRm9sZGVyID0gKG5ld0ZvbGRlck5hbWUpID0+IHtcbiAgICAgICAgZm9sZGVycy5wdXNoKG5ld0ZvbGRlck5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZUZvbGRlciA9IChmb2xkZXJOYW1lKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSBmb2xkZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAoZm9sZGVyc1tpXS5teUZvbGRlclV1aWQgPT09IGZvbGRlck5hbWUubXlGb2xkZXJVdWlkKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge2ZvbGRlcnMsIGFkZEZvbGRlciwgZGVsZXRlRm9sZGVyfVxufSIsImltcG9ydCB7XG4gICAgZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQsXG4gICAgZGVsZXRlRm9sZGVyV2l0aElkLFxuICAgIGRlbGV0ZVRhc2tXaXRoSWRcbn0gZnJvbSAnLi4vaW5kZXguanMnO1xuXG5cbi8vIENyZWF0ZSBhbGwgZWxlbWVudHMgZm9yIGVhY2ggdGFzayBwcm9wZXJ0eSBhbmQgY2hhbmdlIHRleHQgY29udGVudCB0byBjb3JyZXNwb25kaW5nIHZhbHVlXG4vLyBUaGVuIGFkZCB0aGVtIHRvIGEgbWFpbiBkaXYgYW5kIHJldHVyblxuZnVuY3Rpb24gY3JlYXRlVGFza0VsZW1lbnQodGFza05hbWUpIHtcbiAgICBjb25zdCB0YXNrRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgdGFza1RpdGxlSW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uSW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCB0YXNrUHJpb3JpdHlJbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBcbiAgICB0YXNrRGl2LmNsYXNzTGlzdC5hZGQoJ3Rhc2stZGl2Jyk7XG4gICAgdGFza1RpdGxlSW5EaXYudGV4dENvbnRlbnQgPSB0YXNrTmFtZS50aXRsZTtcbiAgICB0YXNrRGVzY3JpcHRpb25JbkRpdi50ZXh0Q29udGVudCA9IHRhc2tOYW1lLmRlc2NyaXB0aW9uO1xuICAgIHRhc2tEdWVEYXRlSW5EaXYudGV4dENvbnRlbnQgPSB0YXNrTmFtZS5kdWVEYXRlO1xuICAgIHRhc2tQcmlvcml0eUluRGl2LnRleHRDb250ZW50ID0gdGFza05hbWUucHJpb3JpdHk7XG5cbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tUaXRsZUluRGl2KTtcbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbkluRGl2KTtcbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tEdWVEYXRlSW5EaXYpO1xuICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQodGFza1ByaW9yaXR5SW5EaXYpO1xuICAgIGNyZWF0ZVRhc2tEZWxldGVCdXR0b24odGFza0RpdikudmFsdWUgPSB0YXNrTmFtZS5teVRhc2tVdWlkO1xuICAgIGNyZWF0ZVRhc2tFZGl0QnV0dG9uKHRhc2tEaXYpO1xuXG4gICAgcmV0dXJuIHRhc2tEaXY7XG59XG5cbi8vIFRha2UgaW4gdGFzayBhbmQgd2hlcmUgdG8gYXBwZW5kXG4vLyBDcmVhdGUgdGhlIHRhc2sgdXNpbmcgY3JlYXRlVGFza0VsZW1lbnQgYW5kIGFzc2lnbiB0byB2YXJpYWJsZVxuLy8gVGFyZ2V0IGVsZW1lbnQgdG8gYXBwZW5kIHRvIGFuZCBhcHBlbmRcbmZ1bmN0aW9uIGFwcGVuZFRhc2sodGFza05hbWUsIGxvY2F0aW9uKSB7XG4gICAgbGV0IHRhc2tET00gPSBjcmVhdGVUYXNrRWxlbWVudCh0YXNrTmFtZSk7XG5cbiAgICBjb25zdCBsb2NhdGlvbkRPTSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uKTtcbiAgICBsb2NhdGlvbkRPTS5hcHBlbmRDaGlsZCh0YXNrRE9NKTtcbn1cblxuLy8gVGFrZSBpbiBmb2xkZXIgbmFtZSB0aGVuIGxvb3AgdGhyb3VnaCB0YXNrcyBpbnNpZGUgZm9sZGVyIHRvIGFwcGVuZCB0byBzY3JlZW5cbmZ1bmN0aW9uIGRpc3BsYXlGb2xkZXJUYXNrcyhmb2xkZXJOYW1lKSB7XG4gICAgZm9sZGVyTmFtZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBhcHBlbmRUYXNrKHRhc2ssIFsndGFzay1jb250YWluZXInXSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRhc2tGb3JtSW5mbygpIHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4tZm9ybScpO1xuXG4gICAgY29uc3QgdGFza1RpdGxlSW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay10aXRsZSddO1xuICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbkluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZGVzY3JpcHRpb24nXTtcbiAgICBjb25zdCB0YXNrRHVlRGF0ZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZHVlLWRhdGUnXTtcbiAgICBjb25zdCB0YXNrUHJpb3JpdHlJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLXByaW9yaXR5J107XG4gICAgXG4gICAgbGV0IHRhc2tUaXRsZSA9IHRhc2tUaXRsZUluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza0Rlc2NyaXB0aW9uID0gdGFza0Rlc2NyaXB0aW9uSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrRHVlRGF0ZSA9IHRhc2tEdWVEYXRlSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrUHJpb3JpdHkgPSB0YXNrUHJpb3JpdHlJbkZvcm0udmFsdWU7XG5cbiAgICByZXR1cm4ge3Rhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5fTtcbn0gXG5cbi8vIENyZWF0ZSBidXR0b24gdG8gaG9sZCBmb2xkZXIgYW5kIHRpdGxlXG4vLyBBZGQgdGl0bGUgdG8gZGl2IGFuZCByZXR1cm5cbmZ1bmN0aW9uIGNyZWF0ZUZvbGRlckJ1dHRvbihmb2xkZXJOYW1lKSB7XG4gICAgY29uc3Qgc2lkZWJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyJyk7XG4gICAgY29uc3QgZm9sZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgZm9sZGVyQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICBmb2xkZXJEaXYuY2xhc3NMaXN0LmFkZCgnZm9sZGVyLWRpdicpO1xuICAgIGZvbGRlckJ0bi5jbGFzc0xpc3QuYWRkKCdmb2xkZXItYnV0dG9uJyk7XG4gICAgZm9sZGVyQnRuLnRleHRDb250ZW50ID0gZm9sZGVyTmFtZS50aXRsZTtcbiAgICBmb2xkZXJCdG4udmFsdWUgPSBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZDtcblxuICAgIGZvbGRlckRpdi5hcHBlbmRDaGlsZChmb2xkZXJCdG4pO1xuICAgIFxuICAgIC8vIENyZWF0ZSB0aGUgZGVsIGJ0biBhbmQgIGFzc2lnbiBzYW1lIGlkIGFzIGZvbGRlciB0byBpdFxuICAgIGNyZWF0ZUZvbGRlckRlbGV0ZUJ1dHRvbihmb2xkZXJEaXYpLnZhbHVlID0gZm9sZGVyTmFtZS5teUZvbGRlclV1aWQ7XG5cbiAgICBzaWRlYmFyLmFwcGVuZENoaWxkKGZvbGRlckRpdik7XG5cbiAgICBmb2xkZXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRGb2xkZXJJZCA9IGZvbGRlck5hbWUubXlGb2xkZXJVdWlkO1xuICAgICAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZChmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvbGRlck5hbWUudGl0bGUsIGZvbGRlck5hbWUubXlGb2xkZXJVdWlkKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRGb2xkZXJJZDtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZm9sZGVyRGl2O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGb2xkZXJEZWxldGVCdXR0b24oZm9sZGVyKSB7XG4gICAgY29uc3QgZm9sZGVyRGVsZXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICBmb2xkZXJEZWxldGVCdG4uY2xhc3NMaXN0LmFkZCgnZm9sZGVyLWRlbGV0ZS1idG4nKTtcbiAgICBmb2xkZXJEZWxldGVCdG4udGV4dENvbnRlbnQgPSAnLSc7XG5cbiAgICBmb2xkZXIuYXBwZW5kQ2hpbGQoZm9sZGVyRGVsZXRlQnRuKTtcblxuICAgIGZvbGRlckRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgbGV0IHRoaXNCdXR0b24gPSBlLnRhcmdldDtcbiAgICAgICAgZGVsZXRlRm9sZGVyV2l0aElkKHRoaXNCdXR0b24udmFsdWUpO1xuICAgICAgICB0aGlzQnV0dG9uLnBhcmVudE5vZGUucmVtb3ZlKCk7XG4gICAgfSlcblxuICAgIHJldHVybiBmb2xkZXJEZWxldGVCdG47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2tEZWxldGVCdXR0b24odGFzaykge1xuICAgIGNvbnN0IHRhc2tEZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIHRhc2tEZWxldGVCdG4uY2xhc3NMaXN0LmFkZCgndGFzay1kZWxldGUtYnRuJyk7XG4gICAgdGFza0RlbGV0ZUJ0bi50ZXh0Q29udGVudCA9ICctJztcblxuICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0RlbGV0ZUJ0bik7XG5cbiAgICB0YXNrRGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgdGhpc0J1dHRvbiA9IGUudGFyZ2V0O1xuICAgICAgICBkZWxldGVUYXNrV2l0aElkKHRoaXNCdXR0b24udmFsdWUpO1xuICAgICAgICB0aGlzQnV0dG9uLnBhcmVudE5vZGUucmVtb3ZlKCk7XG4gICAgfSlcblxuICAgIHJldHVybiB0YXNrRGVsZXRlQnRuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrRWRpdEJ1dHRvbih0YXNrKSB7XG4gICAgY29uc3QgdGFza0VkaXRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIHRhc2tFZGl0QnRuLmNsYXNzTGlzdC5hZGQoJ3Rhc2stZWRpdC1idG4nKTtcbiAgICB0YXNrRWRpdEJ0bi50ZXh0Q29udGVudCA9ICcrJztcblxuICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0VkaXRCdG4pO1xuXG4gICAgdGFza0VkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcblxuICAgIH0pXG59XG5cbi8vIFRha2UgaW4gZm9sZGVyIG5hbWUgYW5kIGNyZWF0ZSBmb2xkZXIgdXNpbmcgZnVuY3Rpb25cbi8vIEFwcGVuZCB0byBzaWRlYmFyXG5mdW5jdGlvbiBhcHBlbmRGb2xkZXIoZm9sZGVyTmFtZSkge1xuICAgIGxldCBmb2xkZXJET00gPSBjcmVhdGVGb2xkZXJCdXR0b24oZm9sZGVyTmFtZSk7XG4gICAgXG4gICAgY29uc3Qgc2lkZWJhckZvbGRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhcicpO1xuICAgIHNpZGViYXJGb2xkZXJzLmFwcGVuZENoaWxkKGZvbGRlckRPTSk7XG59XG5cbi8vIFRha2UgaW4gc3VwZXIgZm9sZGVyIG5hbWUgdG8gbG9vcCB0aHJvdWdoIGVhY2ggZm9sZGVyIGFuZCBhcHBlbmQgdG8gc2lkZWJhclxuZnVuY3Rpb24gZGlzcGxheUZvbGRlcnMoc3VwZXJGb2xkZXJOYW1lKSB7XG4gICAgLy8gY2xlYXJTaWRlYmFyKCk7XG4gICAgc3VwZXJGb2xkZXJOYW1lLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBhcHBlbmRGb2xkZXIoZm9sZGVyKTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBnZXRGb2xkZXJGb3JtSW5mbygpIHtcbiAgICBjb25zdCBmb2xkZXJGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlci1mb3JtJyk7XG5cbiAgICBjb25zdCBmb2xkZXJUaXRsZUluRm9ybSA9IGZvbGRlckZvcm0uZWxlbWVudHNbJ2ZvbGRlci10aXRsZSddLnZhbHVlO1xuXG4gICAgcmV0dXJuIHtmb2xkZXJGb3JtLCBmb2xkZXJUaXRsZUluRm9ybX07XG59XG5cbmZ1bmN0aW9uIGNsZWFyVGFza0NvbnRhaW5lcigpIHtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stY29udGFpbmVyJyk7XG5cbiAgICB0YXNrQ29udGFpbmVyLnRleHRDb250ZW50ID0gJyc7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZERyb3Bkb3duKHN1cGVyRm9sZGVyKSB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLXNlbGVjdGlvbicpO1xuXG4gICAgY2xlYXJTZWxlY3RNZW51KHNlbGVjdCk7XG5cbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIFxuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBmb2xkZXIudGl0bGU7XG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IGZvbGRlci5teUZvbGRlclV1aWQ7IC8vIGZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBnb29kIHdheSB0byBzZWxlY3RcbiAgICAgICAgLy8gb3B0aW9uLnNldEF0dHJpYnV0ZSgnaW5kZXgnLCBpbmRleCsrKTtcblxuICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjbGVhclNlbGVjdE1lbnUoc2VsZWN0T3B0aW9uKSB7XG4gICAgZm9yIChsZXQgaSA9IHNlbGVjdE9wdGlvbi5vcHRpb25zLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2VsZWN0T3B0aW9uLnJlbW92ZSgwKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgZ2V0VGFza0Zvcm1JbmZvLFxuICAgIGdldEZvbGRlckZvcm1JbmZvLFxuICAgIGNyZWF0ZVRhc2tFbGVtZW50LFxuICAgIGNyZWF0ZUZvbGRlckJ1dHRvbixcbiAgICBhcHBlbmRGb2xkZXIsXG4gICAgZGlzcGxheUZvbGRlclRhc2tzLFxuICAgIGFwcGVuZFRhc2ssXG4gICAgZGlzcGxheUZvbGRlcnMsXG4gICAgY2xlYXJUYXNrQ29udGFpbmVyLFxuICAgIGFwcGVuZERyb3Bkb3duLFxuICAgIGNsZWFyU2VsZWN0TWVudVxufSIsImltcG9ydCB7XG4gICAgVGFzayxcbiAgICBGb2xkZXIsXG4gICAgU3VwZXJGb2xkZXJcbn0gZnJvbSAnLi9tb2R1bGVzL2ZhY3Rvcmllcy5qcyc7XG5cbmltcG9ydCB7XG4gICAgZ2V0VGFza0Zvcm1JbmZvLFxuICAgIGdldEZvbGRlckRpYWxvZyxcbiAgICBnZXRGb2xkZXJGb3JtSW5mbyxcbiAgICBjcmVhdGVUYXNrRWxlbWVudCxcbiAgICBjcmVhdGVGb2xkZXJCdXR0b24sXG4gICAgYXBwZW5kRm9sZGVyLFxuICAgIGRpc3BsYXlGb2xkZXJUYXNrcyxcbiAgICBhcHBlbmRUYXNrLFxuICAgIGRpc3BsYXlGb2xkZXJzLFxuICAgIGNsZWFyVGFza0NvbnRhaW5lcixcbiAgICBhcHBlbmREcm9wZG93bixcbiAgICBjbGVhclNlbGVjdE1lbnVcblxufSBmcm9tICcuL21vZHVsZXMvZG9tLmpzJztcblxuLy9TdXBlciBGb2xkZXIgXG5jb25zdCBzdXBlckZvbGRlciA9IFN1cGVyRm9sZGVyKCk7XG5cbi8vIE1haW4gRm9sZGVyIHRoYXQgdGFza3Mgd2lsbCBnbyBpbnRvXG5jb25zdCBpbmJveEZvbGRlciA9IEZvbGRlcignSW5ib3gnKTtcblxuLy8gVGVzdCB0YXNrc1xuY29uc3QgdGFzazEgPSBUYXNrKCdjaG9yZXMnLCAnd2FzaCBkaXNoZXMnLCAnbm92IDIzJywgJ2hpZ2gnKTtcbmNvbnN0IHRhc2syID0gVGFzaygnbW92aWVzJywgJ2F2YXRhcicsICdub3YgMjknLCAnbWVkJyk7XG5jb25zdCB0YXNrMyA9IFRhc2soJ2NvZGluZycsICd0b2RvIGxpc3QnLCAnZGVjIDEwJywgJ2xvdycpO1xuXG50YXNrMS5lZGl0VGFzaygnbmV3IHRoaW5nJywgJ2Fub3RoZXIgbmV3IHRoaW5nJywgJ25ldyBkYXRlJywgJ0hJR0gnKTtcblxuLy8gVGVzdGluZyBmdW5jdGlvbmFsaXRpZXNcbmluYm94Rm9sZGVyLmFkZFRhc2sodGFzazMpO1xuaW5ib3hGb2xkZXIuYWRkVGFzayh0YXNrMik7XG5pbmJveEZvbGRlci5hZGRUYXNrKHRhc2sxKTtcbmluYm94Rm9sZGVyLmRpc3BsYXlUYXNrcygpO1xuc3VwZXJGb2xkZXIuYWRkRm9sZGVyKGluYm94Rm9sZGVyKTtcbmNvbnNvbGUubG9nKHN1cGVyRm9sZGVyKTtcblxuLy8gT3BlbiB0YXNrIG1vZGFsIHdoZW4gY2xpY2tlZFxuY29uc3Qgb3BlblRhc2tNb2RhbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuLXRhc2stbW9kYWwtYnRuJyk7XG5vcGVuVGFza01vZGFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgICBnZXRUYXNrRGlhbG9nKCkuc2hvd01vZGFsKCk7XG4gICAgYXBwZW5kRHJvcGRvd24oc3VwZXJGb2xkZXIpO1xufSk7XG5cbi8vIEdldCB0YXNrIGRpYWxvZyBhbmQgcmV0dXJuIFxuZnVuY3Rpb24gZ2V0VGFza0RpYWxvZygpIHtcbiAgICBjb25zdCB0YXNrRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stZGlhbG9nJyk7XG5cbiAgICByZXR1cm4gdGFza0RpYWxvZztcbn1cblxuLy8gZGlzcGxheUZvbGRlclRhc2tzKGluYm94Rm9sZGVyKTtcbi8vIGRpc3BsYXlGb2xkZXJzKHN1cGVyRm9sZGVyKTtcblxuLy8gT3BlbiBmb2xkZXIgbW9kYWwgd2hlbiBjbGlja2VkXG5jb25zdCBhZGRGb2xkZXJCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLWFkZC1idG4nKTtcbmFkZEZvbGRlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IGZvbGRlckRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItZGlhbG9nJyk7XG4gICAgLy8gZ2V0Rm9sZGVyRGlhbG9nKCk7XG4gICAgLy8gdXNlIHNob3dNb2RhbCgpXG4gICAgZm9sZGVyRGlhbG9nLnNob3dNb2RhbCgpO1xufSk7XG5cbi8vIEV2ZW50IGxpc3RlbmVyIHRvIHN1Ym1pdCBmb2xkZXIgZm9ybVxuLy8gQ3JlYXRlIGEgbmV3IGZvbGRlciBpbnN0YW5jZSB3aXRoIGluZm8gZnJvbSBmb3JtXG4vLyBBZGQgdG8gRE9NXG4vLyBBZGQgdG8gc3VwZXIgZm9sZGVyXG4vLyBTaG91bGQgYmUgZG9uZSBvbiB0aGUgZm9ybSBpbnN0ZWFkIG9mIGJ1dHRvbiBidXQgTUROIGV4YW1wbGUgd2l0aCBkaWFsb2cgZGlkIGl0IHRoaXMgd2F5XG5jb25zdCBmb2xkZXJTdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLWNvbmZpcm0tYnRuJyk7XG5mb2xkZXJTdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFxuICAgIGNvbnN0IGZvbGRlckRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItZGlhbG9nJyk7XG4gICAgY29uc3Qge2ZvbGRlclRpdGxlSW5Gb3JtfSA9IGdldEZvbGRlckZvcm1JbmZvKCk7XG5cbiAgICBsZXQgbmV3Rm9sZGVyID0gRm9sZGVyKGZvbGRlclRpdGxlSW5Gb3JtKTtcbiAgICBhcHBlbmRGb2xkZXIobmV3Rm9sZGVyKTtcbiAgICBcbiAgICBzdXBlckZvbGRlci5hZGRGb2xkZXIobmV3Rm9sZGVyKTtcbiAgICBjb25zb2xlLmxvZyhzdXBlckZvbGRlci5mb2xkZXJzKTtcblxuICAgIGZvbGRlckRpYWxvZy5jbG9zZSgpO1xufSk7XG5cbi8vIEdvIHRocm91Z2ggYWxsIGZvbGRlcnMgYW5kIGNoZWNrIGlmIHRoZSBjbGlja2VkIGJ1dHRvbiB2YWx1ZSBtYXRjaGVzIGZvbGRlciB2YWx1ZVxuLy8gdGhlbiBkaXNwbGF5IHRhc2tzIG9mIHRoYXQgZm9sZGVyIHRvIHNjcmVlblxuZnVuY3Rpb24gZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQodGVtcElkKSB7XG4gICAgLy8gbGV0IHRlbXBJZCA9IHRoaXMudmFsdWU7XG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGlmICh0ZW1wSWQgPT09IGZvbGRlci5teUZvbGRlclV1aWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGFza0NvbnRhaW5lcigpO1xuICAgICAgICAgICAgLy9kaXNwbGF5IGFsbCB0YXNrcyBvZiB0aGlzIGZvbGRlciB0byBwYWdlXG4gICAgICAgICAgICBkaXNwbGF5Rm9sZGVyVGFza3MoZm9sZGVyKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibWF0Y2ggZm91bmRcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgdGFza0FkZEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWFkZC1idG4nKTtcbi8vIENyZWF0ZSBuZXcgdGFzayBpbnN0YW5jZSB1c2luZyBpbmZvIGZyb20gZm9ybVxudGFza0FkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAvLyBHZXQgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIGZpZWxkIChJZCBiZWNhdXNlIHZhbHVlIGlzIHNldCB0byBpZCBpbiBkb20uanMpXG4gICAgY29uc3Qgc2VsZWN0ZWRGb2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLXNlbGVjdGlvbicpO1xuICAgIGNvbnN0IHNlbGVjdGVkRm9sZGVyVmFsdWUgPSBzZWxlY3RlZEZvbGRlci52YWx1ZTtcbiAgICAvLyBHZXQgdmFsdWVzIG9mIHRoZSBmb3JtXG4gICAgY29uc3Qge3Rhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5fSA9IGdldFRhc2tGb3JtSW5mbygpO1xuXG4gICAgLy8gQ3JlYXRlIG5ldyB0YXNrIGFuZCBsb29wIHRocm91Z2ggZm9sZGVyIHRvIGZpbmQgbWF0Y2hpbmcgSWQgYW5kIGFkZFxuICAgIGNvbnN0IG5ld1Rhc2sgPSBUYXNrKHRhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5KTtcbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgaWYgKHNlbGVjdGVkRm9sZGVyVmFsdWUgPT09IGZvbGRlci5teUZvbGRlclV1aWQpIHtcbiAgICAgICAgICAgIGZvbGRlci5hZGRUYXNrKG5ld1Rhc2spO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHRhc2tzIG9mIHRoZSBmb2xkZXIgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgZGlzcGxheWVkIHRvIGF2b2lkIHJlbG9hZGluZyBmb2xkZXJcbiAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZChzZWxlY3RlZEZvbGRlclZhbHVlKTtcbiAgICBjb25zb2xlLmxvZyh0ZXN0Rm9sZGVyKTtcblxuICAgIC8vIENsZWFyIGZvcm0gZmllbGRzXG4gICAgY29uc3QgdGFza0Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1mb3JtJyk7XG4gICAgdGFza0Zvcm0ucmVzZXQoKTtcbiAgICBnZXRUYXNrRGlhbG9nKCkuY2xvc2UoKTtcbn0pXG5cbmZ1bmN0aW9uIGRlbGV0ZUZvbGRlcldpdGhJZChidXR0b25JZCkge1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBpZiAoYnV0dG9uSWQgPT09IGZvbGRlci5teUZvbGRlclV1aWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1dHRvbklkKTtcbiAgICAgICAgICAgIHN1cGVyRm9sZGVyLmRlbGV0ZUZvbGRlcihmb2xkZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRhc2tXaXRoSWQoYnV0dG9uSWQpIHtcbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgZm9sZGVyLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uSWQgPT09IHRhc2subXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIGZvbGRlci5kZWxldGVUYXNrKHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHRlc3RGb2xkZXIyKTtcbn1cblxuXG5sZXQgdGVzdEZvbGRlciA9IEZvbGRlcigndGVzdCcpO1xudGVzdEZvbGRlci5hZGRUYXNrKHRhc2sxKTtcbnN1cGVyRm9sZGVyLmFkZEZvbGRlcih0ZXN0Rm9sZGVyKTtcbmFwcGVuZEZvbGRlcih0ZXN0Rm9sZGVyKTtcblxubGV0IHRlc3RGb2xkZXIyID0gRm9sZGVyKCd0ZXN0MicpO1xudGVzdEZvbGRlcjIuYWRkVGFzayh0YXNrMik7XG50ZXN0Rm9sZGVyMi5hZGRUYXNrKHRhc2sxKTtcbnRlc3RGb2xkZXIyLmFkZFRhc2sodGFzazMpO1xudGVzdEZvbGRlcjIuZGVsZXRlVGFzayh0YXNrMik7XG5zdXBlckZvbGRlci5hZGRGb2xkZXIodGVzdEZvbGRlcjIpO1xuYXBwZW5kRm9sZGVyKHRlc3RGb2xkZXIyKTtcblxuY29uc29sZS5sb2codGVzdEZvbGRlcjIpO1xuXG5leHBvcnQge1xuICAgIGRpc3BsYXlDdXJyZW50Rm9sZGVyV2l0aElkLFxuICAgIGRlbGV0ZUZvbGRlcldpdGhJZCxcbiAgICBkZWxldGVUYXNrV2l0aElkXG59Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicmFuZG9tVVVJRCIsImNyeXB0byIsImJpbmQiLCJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJFcnJvciIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsIm9wdGlvbnMiLCJidWYiLCJvZmZzZXQiLCJybmRzIiwicmFuZG9tIiwiYXJyIiwidW5zYWZlU3RyaW5naWZ5IiwiVGFzayIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJteVRhc2tVdWlkIiwiY29tcGxldGVTdGF0ZSIsImNoYW5nZVByaW9yaXR5IiwibmV3UHJpb3JpdHkiLCJnZXRDb21wbGV0ZVN0YXRlIiwic2V0Q29tcGxldGUiLCJlZGl0VGFzayIsIm5ld1RpdGxlIiwibmV3RGVzY3JpcHRpb24iLCJuZXdEdWVEYXRlIiwicHJpbnRUYXNrIiwiY29uc29sZSIsImxvZyIsIkZvbGRlciIsIm15Rm9sZGVyVXVpZCIsInRhc2tzIiwiYWRkVGFzayIsIm5ld1Rhc2tOYW1lIiwiZGlzcGxheVRhc2tzIiwibGVuZ3RoIiwiZGVsZXRlVGFzayIsInRhc2tOYW1lIiwic3BsaWNlIiwiZGlzcGxheUZvbGRlclRhc2tzIiwiZm9sZGVyTmFtZSIsImZvckVhY2giLCJ0YXNrIiwibG9jYXRpb24iLCJ0YXNrRE9NIiwidGFza0RpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRhc2tUaXRsZUluRGl2IiwidGFza0Rlc2NyaXB0aW9uSW5EaXYiLCJ0YXNrRHVlRGF0ZUluRGl2IiwidGFza1ByaW9yaXR5SW5EaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwidGFza0RlbGV0ZUJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGhpc0J1dHRvbiIsInRhcmdldCIsImRlbGV0ZVRhc2tXaXRoSWQiLCJ2YWx1ZSIsInBhcmVudE5vZGUiLCJyZW1vdmUiLCJjcmVhdGVUYXNrRGVsZXRlQnV0dG9uIiwidGFza0VkaXRCdG4iLCJjcmVhdGVUYXNrRWRpdEJ1dHRvbiIsImNyZWF0ZVRhc2tFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmRUYXNrIiwiYXBwZW5kRm9sZGVyIiwiZm9sZGVyRE9NIiwic2lkZWJhciIsInF1ZXJ5U2VsZWN0b3IiLCJmb2xkZXJEaXYiLCJmb2xkZXJCdG4iLCJmb2xkZXIiLCJmb2xkZXJEZWxldGVCdG4iLCJkZWxldGVGb2xkZXJXaXRoSWQiLCJjcmVhdGVGb2xkZXJEZWxldGVCdXR0b24iLCJjdXJyZW50Rm9sZGVySWQiLCJkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZCIsImNyZWF0ZUZvbGRlckJ1dHRvbiIsInN1cGVyRm9sZGVyIiwiZm9sZGVycyIsImFkZEZvbGRlciIsIm5ld0ZvbGRlck5hbWUiLCJkZWxldGVGb2xkZXIiLCJTdXBlckZvbGRlciIsImluYm94Rm9sZGVyIiwidGFzazEiLCJ0YXNrMiIsInRhc2szIiwiZ2V0VGFza0RpYWxvZyIsInRlbXBJZCIsImJ1dHRvbklkIiwidGVzdEZvbGRlcjIiLCJzaG93TW9kYWwiLCJzZWxlY3QiLCJzZWxlY3RPcHRpb24iLCJjbGVhclNlbGVjdE1lbnUiLCJvcHRpb24iLCJhcHBlbmREcm9wZG93biIsInByZXZlbnREZWZhdWx0IiwiZm9sZGVyRGlhbG9nIiwiZm9sZGVyVGl0bGVJbkZvcm0iLCJmb2xkZXJGb3JtIiwiZWxlbWVudHMiLCJnZXRGb2xkZXJGb3JtSW5mbyIsIm5ld0ZvbGRlciIsImNsb3NlIiwic2VsZWN0ZWRGb2xkZXJWYWx1ZSIsInRhc2tUaXRsZSIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tEdWVEYXRlIiwidGFza1ByaW9yaXR5IiwiZm9ybSIsInRhc2tUaXRsZUluRm9ybSIsInRhc2tEZXNjcmlwdGlvbkluRm9ybSIsInRhc2tEdWVEYXRlSW5Gb3JtIiwidGFza1ByaW9yaXR5SW5Gb3JtIiwiZ2V0VGFza0Zvcm1JbmZvIiwibmV3VGFzayIsInRlc3RGb2xkZXIiLCJyZXNldCJdLCJzb3VyY2VSb290IjoiIn0=