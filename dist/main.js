(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>h,F5:()=>v,k3:()=>E,HA:()=>g,QP:()=>U,mo:()=>p,qQ:()=>y});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));const l=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const l=(e=e||{}).random||(e.rng||d)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=l[e];return n}return function(e,t=0){return r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]}(l)};function a(e,t,n,o,d=l()){let r=!1;const a=()=>r;e=e.toString(),t=t.toString();const i=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:a,setComplete:()=>{r=0==a()},changePriority:i,editTask:(o,d,r,l)=>{e=o,t=d,n=r,i(l)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function i(e,t=l()){let n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function s(e=l()){let t=[];return{folders:t,addFolder:e=>{t.push(e)},deleteFolder:e=>{for(let n=t.length-1;n>=0;--n)t[n].myFolderUuid===e.myFolderUuid&&t.splice(n,1);localStorage.removeItem(e.myFolderUuid)},mySuperFolderUuid:e}}function c(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),r=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,r.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(r),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;E(t.value),t.parentNode.remove(),y()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(e){const t=document.getElementById("edit-form"),n=document.createElement("button");n.classList.add("edit-btn-id"),n.value=e.target.value,t.appendChild(n),function(e){const t=document.getElementById("edit-form"),n=t.elements["task-title"],o=t.elements["task-description"],d=t.elements["task-due-date"],r=t.elements["task-priority"];n.value=e.title,o.value=e.description,d.value=e.dueDate,r.value=e.priority}(U(e.target.value)),p().showModal()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;var n;h(t.value),(n=t).parentNode.classList.contains("complete-task")?n.parentNode.classList.remove("complete-task"):n.parentNode.classList.add("complete-task")})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function u(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");if(n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;v(t.value),t.parentNode.remove(),y()})),t}(n)).value=e.myFolderUuid,"inboxFolder"===e.myFolderUuid){let e=n.childNodes[1];e.parentNode.removeChild(e)}return t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return g(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);const n=document.querySelector(".sidebar"),o=document.querySelector(".inbox-div");"inboxFolder"===e.myFolderUuid?o.appendChild(t):n.appendChild(t)}let m=s("123456");function f(){return document.getElementById("task-dialog")}function p(){return document.getElementById("edit-dialog")}function k(e){const{mySuperFolderUuid:t}=e;return m=s(t),e.folders.forEach((e=>{m.addFolder(function(e){const{title:t,myFolderUuid:n}=e;let o=i(t,n);return e.tasks.forEach((e=>{o.addTask(function(e){const{title:t,description:n,dueDate:o,priority:d,myTaskUuid:r}=e;return a(t,n,o,d,r)}(e))})),o}(e))})),console.log("from recreate super folder function",m),m}function y(){localStorage.setItem("folders",JSON.stringify(m))}function g(e){m.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",c(t),console.log("match found"))}))}function v(e){m.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),m.deleteFolder(t))}))}function E(e){m.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function h(e){m.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))}))}function U(e){let t;return m.folders.forEach((n=>{n.tasks.forEach((n=>{e===n.myTaskUuid&&(t=n)}))})),t}document.getElementById("open-task-modal-btn").addEventListener("click",(function(){f().reset,f().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(JSON.parse(localStorage.getItem("folders")))})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);u(o),m.addFolder(o),localStorage.setItem("folders",JSON.stringify(m)),k(JSON.parse(localStorage.getItem("folders"))),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:r}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),l=a(n,o,d,r);m.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(l)})),localStorage.setItem("folders",JSON.stringify(m)),k(JSON.parse(localStorage.getItem("folders"))),g(t),document.getElementById("main-form").reset(),f().close()})),document.getElementById("task-edit-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".edit-btn-id"),{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:r}=function(){const e=document.getElementById("edit-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}();m.folders.forEach((e=>{e.tasks.forEach((l=>{t.value===l.myTaskUuid&&(l.editTask(n,o,d,r),g(e.myFolderUuid),console.log(l))}))})),t.remove(),p().close()})),function(){if(localStorage.getItem("folders")){let e=JSON.parse(localStorage.getItem("folders"));k(e),m.folders.forEach((e=>{u(e)})),console.log("Inside of loading preset, after displaying",e)}else{const e=a("chores","wash dishes","nov 23","high"),t=a("movies","avatar","nov 29","med"),n=a("coding","todo list","dec 10","low");let o=i("Inbox","inboxFolder");o.addTask(e),m.addFolder(o),u(o);let d=i("test2");d.addTask(t),d.addTask(e),d.addTask(n),d.deleteTask(t),m.addFolder(d),u(d),console.log("else stuf happened")}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y0FBZSxTQUFVLFFBQ2hEaUosRUFBUWpKLEVBQUssU0FBVSxTQUFVLFNBQVUsT0FDM0NrSixFQUFRbEosRUFBSyxTQUFVLFlBQWEsU0FBVSxPQUVwRCxJQUFJbUosRUFBY2pJLEVBQU8sUUFBUyxlQUNsQ2lJLEVBQVk5SCxRQUFRMkgsR0FDcEJ4QyxFQUFZekUsVUFBVW9ILEdBQ3RCN0QsRUFBYTZELEdBRWIsSUFBSUMsRUFBY2xJLEVBQU8sU0FDekJrSSxFQUFZL0gsUUFBUTRILEdBQ3BCRyxFQUFZL0gsUUFBUTJILEdBQ3BCSSxFQUFZL0gsUUFBUTZILEdBQ3BCRSxFQUFZM0gsV0FBV3dILEdBQ3ZCekMsRUFBWXpFLFVBQVVxSCxHQUN0QjlELEVBQWE4RCxHQUNicEksUUFBUUMsSUFBSSxxQkFDaEIsQ0FDSixDQUNBb0ksRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvZmFjdG9yaWVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2RvbS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEXG59OyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFzayh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBteVRhc2tVdWlkID0gdXVpZHY0KCkpIHtcblxuICAgIC8vIGxldCBteVRhc2tVdWlkID0gdXVpZHY0KCk7XG5cbiAgICBsZXQgY29tcGxldGVTdGF0ZSA9IGZhbHNlO1xuXG4gICAgY29uc3QgZ2V0Q29tcGxldGVTdGF0ZSA9ICgpID0+IGNvbXBsZXRlU3RhdGU7XG5cbiAgICBjb25zdCBzZXRDb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdldENvbXBsZXRlU3RhdGUoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29tcGxldGVTdGF0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wbGV0ZVN0YXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIHRpdGxlID0gdGl0bGUudG9TdHJpbmcoKTtcbiAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnRvU3RyaW5nKCk7XG5cbiAgICBjb25zdCBjaGFuZ2VQcmlvcml0eSA9IChuZXdQcmlvcml0eSkgPT4ge1xuICAgICAgICBwcmlvcml0eSA9IG5ld1ByaW9yaXR5O1xuICAgIH1cblxuICAgIGNvbnN0IGVkaXRUYXNrID0gKG5ld1RpdGxlLCBuZXdEZXNjcmlwdGlvbiwgbmV3RHVlRGF0ZSwgbmV3UHJpb3JpdHkpID0+IHtcbiAgICAgICAgdGl0bGUgPSBuZXdUaXRsZTtcbiAgICAgICAgZGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICAgICAgZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gICAgICAgIGNoYW5nZVByaW9yaXR5KG5ld1ByaW9yaXR5KTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmludFRhc2sgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBUYXNrIHRpdGxlIC0gJHt0aXRsZX0sIERlc2MgLSAke2Rlc2NyaXB0aW9ufSwgRGF0ZSAtICR7ZHVlRGF0ZX0sIFByaW9yaXR5IC0gJHtwcmlvcml0eX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgdGl0bGUoKSB7cmV0dXJuIHRpdGxlfSwgXG4gICAgICAgIGdldCBkZXNjcmlwdGlvbigpIHtyZXR1cm4gZGVzY3JpcHRpb259LCBcbiAgICAgICAgZ2V0IGR1ZURhdGUoKSB7cmV0dXJuIGR1ZURhdGV9LCBcbiAgICAgICAgZ2V0IHByaW9yaXR5KCkge3JldHVybiBwcmlvcml0eX0sXG4gICAgICAgIGdldENvbXBsZXRlU3RhdGUsXG4gICAgICAgIHNldENvbXBsZXRlLCBcbiAgICAgICAgY2hhbmdlUHJpb3JpdHksXG4gICAgICAgIGVkaXRUYXNrLFxuICAgICAgICBwcmludFRhc2ssXG4gICAgICAgIG15VGFza1V1aWRcbiAgICB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIEZvbGRlcih0aXRsZSwgbXlGb2xkZXJVdWlkPXV1aWR2NCgpKSB7XG4gICAgXG5cbiAgICAvLyBsZXQgbXlGb2xkZXJVdWlkID0gdXVpZHY0KCk7XG4gICAgbGV0IHRhc2tzID0gW107XG5cbiAgICBjb25zdCBhZGRUYXNrID0gKG5ld1Rhc2tOYW1lKSA9PiB7XG4gICAgICAgIHRhc2tzLnB1c2gobmV3VGFza05hbWUpO1xuXG5cbiAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0obmV3VGFza05hbWUubXlUYXNrVXVpZCwgSlNPTi5zdHJpbmdpZnkobmV3VGFza05hbWUpKTtcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwbGF5VGFza3MgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYXNrICR7aX0gLSAke3Rhc2tzW2ldLnRpdGxlfSwgJHt0YXNrc1tpXS5kdWVEYXRlfSwgJHt0YXNrc1tpXS5wcmlvcml0eX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZVRhc2sgPSAodGFza05hbWUpID0+IHtcbiAgICAgICAgLy8gdGFza3Muc3BsaWNlKHRhc2tOYW1lLCAxKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRhc2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAodGFza3NbaV0ubXlUYXNrVXVpZCA9PT0gdGFza05hbWUubXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIHRhc2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge3RpdGxlLCB0YXNrcywgbXlGb2xkZXJVdWlkLCBhZGRUYXNrLCBkaXNwbGF5VGFza3MsIGRlbGV0ZVRhc2t9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3VwZXJGb2xkZXIobXlTdXBlckZvbGRlclV1aWQ9dXVpZHY0KCkpIHtcbiAgICBsZXQgZm9sZGVycyA9IFtdXG5cbiAgICBjb25zdCBhZGRGb2xkZXIgPSAobmV3Rm9sZGVyTmFtZSkgPT4ge1xuICAgICAgICBmb2xkZXJzLnB1c2gobmV3Rm9sZGVyTmFtZSk7XG5cbiAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0obmV3Rm9sZGVyTmFtZS5teUZvbGRlclV1aWQsIEpTT04uc3RyaW5naWZ5KG5ld0ZvbGRlck5hbWUpKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWxldGVGb2xkZXIgPSAoZm9sZGVyTmFtZSkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gZm9sZGVycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgaWYgKGZvbGRlcnNbaV0ubXlGb2xkZXJVdWlkID09PSBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZCkge1xuICAgICAgICAgICAgICAgIGZvbGRlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZm9sZGVyTmFtZS5teUZvbGRlclV1aWQpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHtmb2xkZXJzLCBhZGRGb2xkZXIsIGRlbGV0ZUZvbGRlciwgbXlTdXBlckZvbGRlclV1aWR9XG59IiwiaW1wb3J0IHtcbiAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZCxcbiAgICBkZWxldGVGb2xkZXJXaXRoSWQsXG4gICAgZGVsZXRlVGFza1dpdGhJZCxcbiAgICBjaGFuZ2VUYXNrU3RhdHVzLFxuICAgIGZpbmRUYXNrV2l0aElkLFxuICAgIGdldEVkaXREaWFsb2csXG4gICAgc3VwZXJGb2xkZXIsXG4gICAgc2V0TG9jYWxTdG9yYWdlXG5cbn0gZnJvbSAnLi4vaW5kZXguanMnO1xuXG4vLyBpbXBvcnQge1xuLy8gICAgIFRhc2ssXG4vLyAgICAgRm9sZGVyLFxuLy8gICAgIFN1cGVyRm9sZGVyXG4vLyB9IGZyb20gJy4vbW9kdWxlcy9mYWN0b3JpZXMuanMnO1xuXG5cbi8vIENyZWF0ZSBhbGwgZWxlbWVudHMgZm9yIGVhY2ggdGFzayBwcm9wZXJ0eSBhbmQgY2hhbmdlIHRleHQgY29udGVudCB0byBjb3JyZXNwb25kaW5nIHZhbHVlXG4vLyBUaGVuIGFkZCB0aGVtIHRvIGEgbWFpbiBkaXYgYW5kIHJldHVyblxuZnVuY3Rpb24gY3JlYXRlVGFza0VsZW1lbnQodGFza05hbWUpIHtcbiAgICBjb25zdCB0YXNrRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgdGFza1RpdGxlSW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uSW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCB0YXNrUHJpb3JpdHlJbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBcbiAgICB0YXNrRGl2LmNsYXNzTGlzdC5hZGQoJ3Rhc2stZGl2Jyk7XG4gICAgdGFza1RpdGxlSW5EaXYudGV4dENvbnRlbnQgPSB0YXNrTmFtZS50aXRsZTtcbiAgICB0YXNrRGVzY3JpcHRpb25JbkRpdi50ZXh0Q29udGVudCA9IHRhc2tOYW1lLmRlc2NyaXB0aW9uO1xuICAgIHRhc2tEdWVEYXRlSW5EaXYudGV4dENvbnRlbnQgPSB0YXNrTmFtZS5kdWVEYXRlO1xuICAgIHRhc2tQcmlvcml0eUluRGl2LnRleHRDb250ZW50ID0gdGFza05hbWUucHJpb3JpdHk7XG5cbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tUaXRsZUluRGl2KTtcbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbkluRGl2KTtcbiAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRhc2tEdWVEYXRlSW5EaXYpO1xuICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQodGFza1ByaW9yaXR5SW5EaXYpO1xuICAgIGNyZWF0ZVRhc2tEZWxldGVCdXR0b24odGFza0RpdikudmFsdWUgPSB0YXNrTmFtZS5teVRhc2tVdWlkO1xuICAgIGNyZWF0ZVRhc2tFZGl0QnV0dG9uKHRhc2tEaXYpLnZhbHVlID0gdGFza05hbWUubXlUYXNrVXVpZDtcbiAgICBjcmVhdGVUYXNrU3RhdHVzQnV0dG9uKHRhc2tEaXYpLnZhbHVlID0gdGFza05hbWUubXlUYXNrVXVpZDtcblxuICAgIHJldHVybiB0YXNrRGl2O1xufVxuXG4vLyBUYWtlIGluIHRhc2sgYW5kIHdoZXJlIHRvIGFwcGVuZFxuLy8gQ3JlYXRlIHRoZSB0YXNrIHVzaW5nIGNyZWF0ZVRhc2tFbGVtZW50IGFuZCBhc3NpZ24gdG8gdmFyaWFibGVcbi8vIFRhcmdldCBlbGVtZW50IHRvIGFwcGVuZCB0byBhbmQgYXBwZW5kXG5mdW5jdGlvbiBhcHBlbmRUYXNrKHRhc2tOYW1lLCBsb2NhdGlvbikge1xuICAgIGxldCB0YXNrRE9NID0gY3JlYXRlVGFza0VsZW1lbnQodGFza05hbWUpO1xuXG4gICAgY29uc3QgbG9jYXRpb25ET00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2NhdGlvbik7XG4gICAgbG9jYXRpb25ET00uYXBwZW5kQ2hpbGQodGFza0RPTSk7XG59XG5cbi8vIFRha2UgaW4gZm9sZGVyIG5hbWUgdGhlbiBsb29wIHRocm91Z2ggdGFza3MgaW5zaWRlIGZvbGRlciB0byBhcHBlbmQgdG8gc2NyZWVuXG5mdW5jdGlvbiBkaXNwbGF5Rm9sZGVyVGFza3MoZm9sZGVyTmFtZSkge1xuICAgIGZvbGRlck5hbWUudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgYXBwZW5kVGFzayh0YXNrLCBbJ3Rhc2stY29udGFpbmVyJ10pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUYXNrRm9ybUluZm8oKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLWZvcm0nKTtcblxuICAgIGNvbnN0IHRhc2tUaXRsZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stdGl0bGUnXTtcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25JbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWRlc2NyaXB0aW9uJ107XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWR1ZS1kYXRlJ107XG4gICAgY29uc3QgdGFza1ByaW9yaXR5SW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1wcmlvcml0eSddO1xuICAgIFxuICAgIGxldCB0YXNrVGl0bGUgPSB0YXNrVGl0bGVJbkZvcm0udmFsdWU7XG4gICAgbGV0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tEZXNjcmlwdGlvbkluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza0R1ZURhdGUgPSB0YXNrRHVlRGF0ZUluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza1ByaW9yaXR5ID0gdGFza1ByaW9yaXR5SW5Gb3JtLnZhbHVlO1xuXG4gICAgcmV0dXJuIHt0YXNrVGl0bGUsIHRhc2tEZXNjcmlwdGlvbiwgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eX07XG59IFxuXG5mdW5jdGlvbiBnZXRUYXNrRWRpdEZvcm1JbmZvKCkge1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdC1mb3JtJyk7XG5cbiAgICBjb25zdCB0YXNrVGl0bGVJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLXRpdGxlJ107XG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uSW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1kZXNjcmlwdGlvbiddO1xuICAgIGNvbnN0IHRhc2tEdWVEYXRlSW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1kdWUtZGF0ZSddO1xuICAgIGNvbnN0IHRhc2tQcmlvcml0eUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stcHJpb3JpdHknXTtcbiAgICBcbiAgICBsZXQgdGFza1RpdGxlID0gdGFza1RpdGxlSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrRGVzY3JpcHRpb25JbkZvcm0udmFsdWU7XG4gICAgbGV0IHRhc2tEdWVEYXRlID0gdGFza0R1ZURhdGVJbkZvcm0udmFsdWU7XG4gICAgbGV0IHRhc2tQcmlvcml0eSA9IHRhc2tQcmlvcml0eUluRm9ybS52YWx1ZTtcblxuICAgIHJldHVybiB7dGFza1RpdGxlLCB0YXNrRGVzY3JpcHRpb24sIHRhc2tEdWVEYXRlLCB0YXNrUHJpb3JpdHl9O1xufSBcblxuLy8gQ3JlYXRlIGJ1dHRvbiB0byBob2xkIGZvbGRlciBhbmQgdGl0bGVcbi8vIEFkZCB0aXRsZSB0byBkaXYgYW5kIHJldHVyblxuZnVuY3Rpb24gY3JlYXRlRm9sZGVyQnV0dG9uKGZvbGRlck5hbWUpIHtcbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXInKTtcbiAgICBjb25zdCBmb2xkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBmb2xkZXJCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIGZvbGRlckRpdi5jbGFzc0xpc3QuYWRkKCdmb2xkZXItZGl2Jyk7XG4gICAgZm9sZGVyQnRuLmNsYXNzTGlzdC5hZGQoJ2ZvbGRlci1idXR0b24nKTtcbiAgICBmb2xkZXJCdG4udGV4dENvbnRlbnQgPSBmb2xkZXJOYW1lLnRpdGxlO1xuICAgIGZvbGRlckJ0bi52YWx1ZSA9IGZvbGRlck5hbWUubXlGb2xkZXJVdWlkO1xuICAgIFxuICAgIGZvbGRlckRpdi5hcHBlbmRDaGlsZChmb2xkZXJCdG4pO1xuICAgIFxuICAgIC8vIENyZWF0ZSB0aGUgZGVsIGJ0biBhbmQgIGFzc2lnbiBzYW1lIGlkIGFzIGZvbGRlciB0byBpdFxuICAgIGNyZWF0ZUZvbGRlckRlbGV0ZUJ1dHRvbihmb2xkZXJEaXYpLnZhbHVlID0gZm9sZGVyTmFtZS5teUZvbGRlclV1aWQ7XG5cbiAgICAvLyBSZW1vdmUgZGVsZXRlIGJ1dHRvbiBvZiBpbmJveCBmb2xkZXJcbiAgICBpZiAoZm9sZGVyTmFtZS5teUZvbGRlclV1aWQgPT09ICdpbmJveEZvbGRlcicpIHtcbiAgICAgICAgbGV0IGNoaWxkQnRuID0gZm9sZGVyRGl2LmNoaWxkTm9kZXNbMV07XG4gICAgICAgIGNoaWxkQnRuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGRCdG4pO1xuICAgIH1cbiAgICBcbiAgICBzaWRlYmFyLmFwcGVuZENoaWxkKGZvbGRlckRpdik7XG4gICAgXG4gICAgZm9sZGVyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBjdXJyZW50Rm9sZGVySWQgPSBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZDtcbiAgICAgICAgZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQoZm9sZGVyTmFtZS5teUZvbGRlclV1aWQpO1xuICAgICAgICBjb25zb2xlLmxvZyhmb2xkZXJOYW1lLnRpdGxlLCBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50Rm9sZGVySWQ7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGZvbGRlckRpdjtcbn1cblxuLy8gVGFrZSBpbiBmb2xkZXIgbmFtZSBhbmQgY3JlYXRlIGZvbGRlciB1c2luZyBmdW5jdGlvblxuLy8gQXBwZW5kIHRvIHNpZGViYXJcbmZ1bmN0aW9uIGFwcGVuZEZvbGRlcihmb2xkZXJOYW1lKSB7XG4gICAgbGV0IGZvbGRlckRPTSA9IGNyZWF0ZUZvbGRlckJ1dHRvbihmb2xkZXJOYW1lKTtcbiAgICBcbiAgICBjb25zdCBzaWRlYmFyRm9sZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyJyk7XG4gICAgY29uc3QgaW5ib3hEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5ib3gtZGl2Jyk7XG5cbiAgICBpZihmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZCA9PT0gJ2luYm94Rm9sZGVyJykge1xuICAgICAgICBpbmJveERpdi5hcHBlbmRDaGlsZChmb2xkZXJET00pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpZGViYXJGb2xkZXJzLmFwcGVuZENoaWxkKGZvbGRlckRPTSk7XG4gICAgfVxufVxuXG4vLyBUYWtlIGluIHN1cGVyIGZvbGRlciBuYW1lIHRvIGxvb3AgdGhyb3VnaCBlYWNoIGZvbGRlciBhbmQgYXBwZW5kIHRvIHNpZGViYXJcbmZ1bmN0aW9uIGRpc3BsYXlGb2xkZXJzKHN1cGVyRm9sZGVyTmFtZSkge1xuICAgIC8vIGNsZWFyU2lkZWJhcigpO1xuICAgIHN1cGVyRm9sZGVyTmFtZS5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgYXBwZW5kRm9sZGVyKGZvbGRlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZvbGRlckRlbGV0ZUJ1dHRvbihmb2xkZXIpIHtcbiAgICBjb25zdCBmb2xkZXJEZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIGZvbGRlckRlbGV0ZUJ0bi5jbGFzc0xpc3QuYWRkKCdmb2xkZXItZGVsZXRlLWJ0bicpO1xuICAgIGZvbGRlckRlbGV0ZUJ0bi50ZXh0Q29udGVudCA9ICctJztcblxuICAgIFxuICAgIGZvbGRlci5hcHBlbmRDaGlsZChmb2xkZXJEZWxldGVCdG4pO1xuICAgIFxuXG4gICAgZm9sZGVyRGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgdGhpc0J1dHRvbiA9IGUudGFyZ2V0O1xuICAgICAgICBkZWxldGVGb2xkZXJXaXRoSWQodGhpc0J1dHRvbi52YWx1ZSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN1cGVyRm9sZGVyKTtcbiAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2ZvbGRlcicsIEpTT04uc3RyaW5naWZ5KHN1cGVyRm9sZGVyKSk7XG4gICAgICAgIHRoaXNCdXR0b24ucGFyZW50Tm9kZS5yZW1vdmUoKTtcbiAgICAgICAgc2V0TG9jYWxTdG9yYWdlKCk7XG4gICAgfSlcblxuICAgIHJldHVybiBmb2xkZXJEZWxldGVCdG47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2tEZWxldGVCdXR0b24odGFzaykge1xuICAgIGNvbnN0IHRhc2tEZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIHRhc2tEZWxldGVCdG4uY2xhc3NMaXN0LmFkZCgndGFzay1kZWxldGUtYnRuJyk7XG4gICAgdGFza0RlbGV0ZUJ0bi50ZXh0Q29udGVudCA9ICctJztcblxuICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0RlbGV0ZUJ0bik7XG5cbiAgICB0YXNrRGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgdGhpc0J1dHRvbiA9IGUudGFyZ2V0O1xuICAgICAgICBkZWxldGVUYXNrV2l0aElkKHRoaXNCdXR0b24udmFsdWUpO1xuICAgICAgICB0aGlzQnV0dG9uLnBhcmVudE5vZGUucmVtb3ZlKCk7XG4gICAgICAgIHNldExvY2FsU3RvcmFnZSgpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gdGFza0RlbGV0ZUJ0bjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0VkaXRCdXR0b24odGFzaykge1xuICAgIGNvbnN0IHRhc2tFZGl0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICB0YXNrRWRpdEJ0bi5jbGFzc0xpc3QuYWRkKCd0YXNrLWVkaXQtYnRuJyk7XG4gICAgdGFza0VkaXRCdG4udGV4dENvbnRlbnQgPSAnKyc7XG5cbiAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tFZGl0QnRuKTtcblxuICAgIHRhc2tFZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBDcmVhdGUgYSBidXR0b24gdG8gaG9sZCBJZCB2YWx1ZVxuICAgICAgICBjb25zdCBlZGl0Rm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWZvcm0nKTtcbiAgICAgICAgY29uc3QgYnRuRm9ySWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgICAgICBidG5Gb3JJZC5jbGFzc0xpc3QuYWRkKCdlZGl0LWJ0bi1pZCcpO1xuICAgICAgICBidG5Gb3JJZC52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIGVkaXRGb3JtLmFwcGVuZENoaWxkKGJ0bkZvcklkKTtcblxuICAgICAgICAvLyBDaGFuZ2UgZm9ybSBmaWVsZHMgdG8gdGFzayBpbmZvIGFuZCBvcGVuIG1vZGFsXG4gICAgICAgIGNoYW5nZVRhc2tGb3JtRmllbGRzKGZpbmRUYXNrV2l0aElkKGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIGdldEVkaXREaWFsb2coKS5zaG93TW9kYWwoKTtcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRhc2tFZGl0QnRuO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VUYXNrRm9ybUZpZWxkcyh0YXNrKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWZvcm0nKTtcblxuICAgIGNvbnN0IHRhc2tUaXRsZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stdGl0bGUnXTtcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25JbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWRlc2NyaXB0aW9uJ107XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWR1ZS1kYXRlJ107XG4gICAgY29uc3QgdGFza1ByaW9yaXR5SW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1wcmlvcml0eSddO1xuXG4gICAgdGFza1RpdGxlSW5Gb3JtLnZhbHVlID0gdGFzay50aXRsZTtcbiAgICB0YXNrRGVzY3JpcHRpb25JbkZvcm0udmFsdWUgPSB0YXNrLmRlc2NyaXB0aW9uO1xuICAgIHRhc2tEdWVEYXRlSW5Gb3JtLnZhbHVlID0gdGFzay5kdWVEYXRlO1xuICAgIHRhc2tQcmlvcml0eUluRm9ybS52YWx1ZSA9IHRhc2sucHJpb3JpdHk7XG59IFxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrU3RhdHVzQnV0dG9uKHRhc2spIHtcbiAgICBjb25zdCB0YXNrU3RhdHVzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICB0YXNrU3RhdHVzQnRuLmNsYXNzTGlzdC5hZGQoJ3Rhc2stc3RhdHVzLWJ0bicpO1xuICAgIHRhc2tTdGF0dXNCdG4udGV4dENvbnRlbnQgPSAn4pyUJztcblxuICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza1N0YXR1c0J0bik7XG5cbiAgICB0YXNrU3RhdHVzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgdGhpc0J1dHRvbiA9IGUudGFyZ2V0O1xuICAgICAgICBjaGFuZ2VUYXNrU3RhdHVzKHRoaXNCdXR0b24udmFsdWUpO1xuICAgICAgICB0b2dnbGVDb21wbGV0ZVN0eWxlKHRoaXNCdXR0b24pO1xuICAgIH0pXG5cbiAgICByZXR1cm4gdGFza1N0YXR1c0J0bjtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVTdHlsZShlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZS10YXNrJykpIHtcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlLXRhc2snKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjb21wbGV0ZS10YXNrJyk7XG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gZ2V0Rm9sZGVyRm9ybUluZm8oKSB7XG4gICAgY29uc3QgZm9sZGVyRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItZm9ybScpO1xuXG4gICAgY29uc3QgZm9sZGVyVGl0bGVJbkZvcm0gPSBmb2xkZXJGb3JtLmVsZW1lbnRzWydmb2xkZXItdGl0bGUnXS52YWx1ZTtcblxuICAgIHJldHVybiB7Zm9sZGVyRm9ybSwgZm9sZGVyVGl0bGVJbkZvcm19O1xufVxuXG5mdW5jdGlvbiBjbGVhclRhc2tDb250YWluZXIoKSB7XG4gICAgY29uc3QgdGFza0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWNvbnRhaW5lcicpO1xuXG4gICAgdGFza0NvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xufVxuXG5mdW5jdGlvbiBhcHBlbmREcm9wZG93bihzdXBlckZvbGRlcikge1xuXG4gICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlci1zZWxlY3Rpb24nKTtcblxuICAgIGNsZWFyU2VsZWN0TWVudShzZWxlY3QpO1xuXG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBcbiAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gZm9sZGVyLnRpdGxlO1xuICAgICAgICBvcHRpb24udmFsdWUgPSBmb2xkZXIubXlGb2xkZXJVdWlkOyAvLyBmaWd1cmUgb3V0IGlmIHRoaXMgaXMgZ29vZCB3YXkgdG8gc2VsZWN0XG4gICAgICAgIC8vIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2luZGV4JywgaW5kZXgrKyk7XG5cbiAgICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gY2xlYXJTZWxlY3RNZW51KHNlbGVjdE9wdGlvbikge1xuICAgIGZvciAobGV0IGkgPSBzZWxlY3RPcHRpb24ub3B0aW9ucy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHNlbGVjdE9wdGlvbi5yZW1vdmUoMCk7XG4gICAgfVxufVxuXG5leHBvcnQge1xuICAgIGdldFRhc2tGb3JtSW5mbyxcbiAgICBnZXRUYXNrRWRpdEZvcm1JbmZvLFxuICAgIGdldEZvbGRlckZvcm1JbmZvLFxuICAgIGNyZWF0ZVRhc2tFbGVtZW50LFxuICAgIGNyZWF0ZUZvbGRlckJ1dHRvbixcbiAgICBhcHBlbmRGb2xkZXIsXG4gICAgZGlzcGxheUZvbGRlclRhc2tzLFxuICAgIGFwcGVuZFRhc2ssXG4gICAgZGlzcGxheUZvbGRlcnMsXG4gICAgY2xlYXJUYXNrQ29udGFpbmVyLFxuICAgIGFwcGVuZERyb3Bkb3duLFxuICAgIGNsZWFyU2VsZWN0TWVudSxcbn0iLCJpbXBvcnQge1xuICAgIFRhc2ssXG4gICAgRm9sZGVyLFxuICAgIFN1cGVyRm9sZGVyXG59IGZyb20gJy4vbW9kdWxlcy9mYWN0b3JpZXMuanMnO1xuXG5pbXBvcnQge1xuICAgIGdldFRhc2tGb3JtSW5mbyxcbiAgICBnZXRUYXNrRWRpdEZvcm1JbmZvLFxuICAgIGdldEZvbGRlckZvcm1JbmZvLFxuICAgIGFwcGVuZEZvbGRlcixcbiAgICBkaXNwbGF5Rm9sZGVyVGFza3MsXG4gICAgY2xlYXJUYXNrQ29udGFpbmVyLFxuICAgIGFwcGVuZERyb3Bkb3duLFxuICAgIGRpc3BsYXlGb2xkZXJzXG5cbn0gZnJvbSAnLi9tb2R1bGVzL2RvbS5qcyc7XG5cbmltcG9ydCB7IGZvcm1hdERpc3RhbmNlLCBzdWJEYXlzIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5cblxuLy9TdXBlciBGb2xkZXIgXG5sZXQgc3VwZXJGb2xkZXIgPSBTdXBlckZvbGRlcignMTIzNDU2Jyk7XG5cbi8vIE9wZW4gdGFzayBtb2RhbCB3aGVuIGNsaWNrZWRcbmNvbnN0IG9wZW5UYXNrTW9kYWxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbi10YXNrLW1vZGFsLWJ0bicpO1xub3BlblRhc2tNb2RhbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGdldFRhc2tEaWFsb2coKS5yZXNldDtcbiAgICBnZXRUYXNrRGlhbG9nKCkuc2hvd01vZGFsKCk7XG4gICAgYXBwZW5kRHJvcGRvd24oSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZm9sZGVycycpKSk7XG59KTtcblxuLy8gR2V0IHRhc2sgZGlhbG9nIGFuZCByZXR1cm4gXG5mdW5jdGlvbiBnZXRUYXNrRGlhbG9nKCkge1xuICAgIGNvbnN0IHRhc2tEaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1kaWFsb2cnKTtcblxuICAgIHJldHVybiB0YXNrRGlhbG9nO1xufVxuXG5mdW5jdGlvbiBnZXRFZGl0RGlhbG9nKCkge1xuICAgIGNvbnN0IGVkaXREaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdC1kaWFsb2cnKTtcblxuICAgIHJldHVybiBlZGl0RGlhbG9nO1xufVxuXG4vLyBPcGVuIGZvbGRlciBtb2RhbCB3aGVuIGNsaWNrZWRcbmNvbnN0IGFkZEZvbGRlckJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItYWRkLWJ0bicpO1xuYWRkRm9sZGVyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgY29uc3QgZm9sZGVyRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlci1kaWFsb2cnKTtcbiAgICBmb2xkZXJEaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgXG59KTtcblxuLy8gRXZlbnQgbGlzdGVuZXIgdG8gc3VibWl0IGZvbGRlciBmb3JtXG4vLyBDcmVhdGUgYSBuZXcgZm9sZGVyIGluc3RhbmNlIHdpdGggaW5mbyBmcm9tIGZvcm1cbi8vIEFkZCB0byBET01cbi8vIEFkZCB0byBzdXBlciBmb2xkZXJcbi8vIFNob3VsZCBiZSBkb25lIG9uIHRoZSBmb3JtIGluc3RlYWQgb2YgYnV0dG9uIGJ1dCBNRE4gZXhhbXBsZSB3aXRoIGRpYWxvZyBkaWQgaXQgdGhpcyB3YXlcbmNvbnN0IGZvbGRlclN1Ym1pdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItY29uZmlybS1idG4nKTtcbmZvbGRlclN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgXG4gICAgY29uc3QgZm9sZGVyRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlci1kaWFsb2cnKTtcbiAgICBjb25zdCB7Zm9sZGVyVGl0bGVJbkZvcm19ID0gZ2V0Rm9sZGVyRm9ybUluZm8oKTtcblxuICAgIGxldCBuZXdGb2xkZXIgPSBGb2xkZXIoZm9sZGVyVGl0bGVJbkZvcm0pO1xuICAgIGFwcGVuZEZvbGRlcihuZXdGb2xkZXIpO1xuICAgIFxuICAgIHN1cGVyRm9sZGVyLmFkZEZvbGRlcihuZXdGb2xkZXIpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmb2xkZXJzJywgSlNPTi5zdHJpbmdpZnkoc3VwZXJGb2xkZXIpKTtcblxuICAgIGxldCBzdXBlckZvbGRlckZyb21McyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2ZvbGRlcnMnKSk7XG5cbiAgICByZWNyZWF0ZVN1cGVyRm9sZGVyRnJvbU9iamVjdChzdXBlckZvbGRlckZyb21Mcyk7XG5cbiAgICBmb2xkZXJEaWFsb2cuY2xvc2UoKTtcblxufSk7XG5cbmNvbnN0IHRhc2tBZGRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1hZGQtYnRuJyk7XG4vLyBDcmVhdGUgbmV3IHRhc2sgaW5zdGFuY2UgdXNpbmcgaW5mbyBmcm9tIGZvcm1cbnRhc2tBZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgLy8gR2V0IHZhbHVlIG9mIHRoZSBzZWxlY3RlZCBmaWVsZCAoSWQgYmVjYXVzZSB2YWx1ZSBpcyBzZXQgdG8gaWQgaW4gZG9tLmpzKVxuICAgIGNvbnN0IHNlbGVjdGVkRm9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlci1zZWxlY3Rpb24nKTtcbiAgICBjb25zdCBzZWxlY3RlZEZvbGRlclZhbHVlID0gc2VsZWN0ZWRGb2xkZXIudmFsdWU7XG4gICAgLy8gR2V0IHZhbHVlcyBvZiB0aGUgZm9ybVxuICAgIGNvbnN0IHt0YXNrVGl0bGUsIHRhc2tEZXNjcmlwdGlvbiwgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eX0gPSBnZXRUYXNrRm9ybUluZm8oKTtcblxuICAgIC8vIENyZWF0ZSBuZXcgdGFzayBhbmQgbG9vcCB0aHJvdWdoIGZvbGRlciB0byBmaW5kIG1hdGNoaW5nIElkIGFuZCBhZGRcbiAgICBjb25zdCBuZXdUYXNrID0gVGFzayh0YXNrVGl0bGUsIHRhc2tEZXNjcmlwdGlvbiwgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eSk7XG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGlmIChzZWxlY3RlZEZvbGRlclZhbHVlID09PSBmb2xkZXIubXlGb2xkZXJVdWlkKSB7XG4gICAgICAgICAgICBmb2xkZXIuYWRkVGFzayhuZXdUYXNrKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2ZvbGRlcnMnLCBKU09OLnN0cmluZ2lmeShzdXBlckZvbGRlcikpO1xuXG4gICAgbGV0IHN1cGVyRm9sZGVyRnJvbUxzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZm9sZGVycycpKTtcblxuICAgIHJlY3JlYXRlU3VwZXJGb2xkZXJGcm9tT2JqZWN0KHN1cGVyRm9sZGVyRnJvbUxzKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgdGFza3Mgb2YgdGhlIGZvbGRlciB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgdG8gYXZvaWQgcmVsb2FkaW5nIGZvbGRlclxuICAgIGRpc3BsYXlDdXJyZW50Rm9sZGVyV2l0aElkKHNlbGVjdGVkRm9sZGVyVmFsdWUpO1xuICAgIFxuICAgIC8vIENsZWFyIGZvcm0gZmllbGRzXG4gICAgY29uc3QgdGFza0Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1mb3JtJyk7XG4gICAgdGFza0Zvcm0ucmVzZXQoKTtcbiAgICBnZXRUYXNrRGlhbG9nKCkuY2xvc2UoKTtcbn0pXG5cbi8vIFNlbGVjdCB0aGUgYnV0dG9uIHdpdGggSWQgYW5kIGZpbmQgdGFzayB3aXRoIHRoYXQgSWRcbi8vIENoYW5nZSB0aGUgaW5mbyBvZiB0aGF0IHRhc2sgYW5kIHVwZGF0ZSBmb2xkZXJcbi8vIERlbGV0ZSBidXR0b24gYWZ0ZXIgYW5kIGNsb3NlXG5jb25zdCB0YXNrRWRpdENvbmZpcm1CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1lZGl0LWJ0bicpO1xudGFza0VkaXRDb25maXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICBjb25zdCBidG5JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lZGl0LWJ0bi1pZCcpO1xuICAgIFxuICAgIGNvbnN0IHt0YXNrVGl0bGUsIHRhc2tEZXNjcmlwdGlvbiwgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eX0gPSBnZXRUYXNrRWRpdEZvcm1JbmZvKCk7XG4gICAgXG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGZvbGRlci50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgaWYgKGJ0bklkLnZhbHVlID09PSB0YXNrLm15VGFza1V1aWQpIHtcbiAgICAgICAgICAgICAgICB0YXNrLmVkaXRUYXNrKHRhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZChmb2xkZXIubXlGb2xkZXJVdWlkKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICBcbiAgICBidG5JZC5yZW1vdmUoKTtcbiAgICBnZXRFZGl0RGlhbG9nKCkuY2xvc2UoKTtcbiAgICBcbn0pXG5cblxuZnVuY3Rpb24gbG9hZFByZXNldEZvbGRlcnMoKSB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmb2xkZXJzJykpe1xuICAgICAgICBsZXQgc3VwZXJGb2xkZXJGcm9tTHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdmb2xkZXJzJykpO1xuICAgICAgICByZWNyZWF0ZVN1cGVyRm9sZGVyRnJvbU9iamVjdChzdXBlckZvbGRlckZyb21Mcyk7XG5cbiAgICAgICAgZGlzcGxheUZvbGRlcnMoc3VwZXJGb2xkZXIpO1xuICAgICAgICBjb25zb2xlLmxvZygnSW5zaWRlIG9mIGxvYWRpbmcgcHJlc2V0LCBhZnRlciBkaXNwbGF5aW5nJywgc3VwZXJGb2xkZXJGcm9tTHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhc2sxID0gVGFzaygnY2hvcmVzJywgJ3dhc2ggZGlzaGVzJywgJ25vdiAyMycsICdoaWdoJyk7XG4gICAgICAgIGNvbnN0IHRhc2syID0gVGFzaygnbW92aWVzJywgJ2F2YXRhcicsICdub3YgMjknLCAnbWVkJyk7XG4gICAgICAgIGNvbnN0IHRhc2szID0gVGFzaygnY29kaW5nJywgJ3RvZG8gbGlzdCcsICdkZWMgMTAnLCAnbG93Jyk7XG5cbiAgICAgICAgbGV0IGluYm94Rm9sZGVyID0gRm9sZGVyKCdJbmJveCcsICdpbmJveEZvbGRlcicpO1xuICAgICAgICBpbmJveEZvbGRlci5hZGRUYXNrKHRhc2sxKTtcbiAgICAgICAgc3VwZXJGb2xkZXIuYWRkRm9sZGVyKGluYm94Rm9sZGVyKTtcbiAgICAgICAgYXBwZW5kRm9sZGVyKGluYm94Rm9sZGVyKTtcblxuICAgICAgICBsZXQgdGVzdEZvbGRlcjIgPSBGb2xkZXIoJ3Rlc3QyJyk7XG4gICAgICAgIHRlc3RGb2xkZXIyLmFkZFRhc2sodGFzazIpO1xuICAgICAgICB0ZXN0Rm9sZGVyMi5hZGRUYXNrKHRhc2sxKTtcbiAgICAgICAgdGVzdEZvbGRlcjIuYWRkVGFzayh0YXNrMyk7XG4gICAgICAgIHRlc3RGb2xkZXIyLmRlbGV0ZVRhc2sodGFzazIpO1xuICAgICAgICBzdXBlckZvbGRlci5hZGRGb2xkZXIodGVzdEZvbGRlcjIpO1xuICAgICAgICBhcHBlbmRGb2xkZXIodGVzdEZvbGRlcjIpO1xuICAgICAgICBjb25zb2xlLmxvZygnZWxzZSBzdHVmIGhhcHBlbmVkJyk7XG4gICAgfVxufVxubG9hZFByZXNldEZvbGRlcnMoKTtcblxuLy8gUmVjcmVhdGUgdGFzayBmcm9tIGdlbmVyaWMgb2JqZWN0XG5mdW5jdGlvbiByZWNyZWF0ZVRhc2tPYmoodGFyZ2V0T2JqKSB7XG4gICAgY29uc3Qge3RpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIG15VGFza1V1aWR9ID0gdGFyZ2V0T2JqO1xuXG4gICAgcmV0dXJuIFRhc2sodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbXlUYXNrVXVpZCk7XG59XG5cbi8vIFJlY3JlYXRlIGEgZm9sZGVyIGZyb20gZ2VuZXJpYyBvYmplY3Rcbi8vIExvb3AgdGhyb3VnaCBHRU5FUklDIG9iamVjdHMgdGFza3Ncbi8vIEZvciBlYWNoIHRhc2ssIHJlY3JlYXRlIGEgdGFzayBhbmQgYWRkIHRvIHRoYXQgZm9sZGVyXG5mdW5jdGlvbiByZWNyZWF0ZUZvbGRlckZyb21PYmplY3QoZ2VuZXJpY09iaikge1xuXG4gICAgY29uc3Qge3RpdGxlLCAgbXlGb2xkZXJVdWlkfSA9IGdlbmVyaWNPYmo7XG4gICAgXG4gICAgbGV0IGZvbGRlckR1cGUgPSBGb2xkZXIodGl0bGUsIG15Rm9sZGVyVXVpZCk7XG5cbiAgICBnZW5lcmljT2JqLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGZvbGRlckR1cGUuYWRkVGFzayhyZWNyZWF0ZVRhc2tPYmoodGFzaykpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gZm9sZGVyRHVwZTtcbiAgICBcbn1cblxuZnVuY3Rpb24gcmVjcmVhdGVTdXBlckZvbGRlckZyb21PYmplY3QoZ2VuZXJpY09iaikge1xuICAgIGNvbnN0IHtteVN1cGVyRm9sZGVyVXVpZH0gPSBnZW5lcmljT2JqO1xuXG4gICAgc3VwZXJGb2xkZXIgPSBTdXBlckZvbGRlcihteVN1cGVyRm9sZGVyVXVpZCk7XG5cbiAgICBnZW5lcmljT2JqLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBzdXBlckZvbGRlci5hZGRGb2xkZXIocmVjcmVhdGVGb2xkZXJGcm9tT2JqZWN0KGZvbGRlcikpXG4gICAgfSlcblxuICAgIGNvbnNvbGUubG9nKCdmcm9tIHJlY3JlYXRlIHN1cGVyIGZvbGRlciBmdW5jdGlvbicsIHN1cGVyRm9sZGVyKTtcbiAgICByZXR1cm4gc3VwZXJGb2xkZXI7XG59XG5cblxuZnVuY3Rpb24gc2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmb2xkZXJzJywgSlNPTi5zdHJpbmdpZnkoc3VwZXJGb2xkZXIpKTtcbn1cblxuLy8gR28gdGhyb3VnaCBhbGwgZm9sZGVycyBhbmQgY2hlY2sgaWYgdGhlIGNsaWNrZWQgYnV0dG9uIHZhbHVlIG1hdGNoZXMgZm9sZGVyIHZhbHVlXG4vLyB0aGVuIGRpc3BsYXkgdGFza3Mgb2YgdGhhdCBmb2xkZXIgdG8gc2NyZWVuXG5mdW5jdGlvbiBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZCh0ZW1wSWQpIHtcblxuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBpZiAodGVtcElkID09PSBmb2xkZXIubXlGb2xkZXJVdWlkKSB7XG4gICAgICAgICAgICBjbGVhclRhc2tDb250YWluZXIoKTtcbiAgICAgICAgICAgIC8vZGlzcGxheSBhbGwgdGFza3Mgb2YgdGhpcyBmb2xkZXIgdG8gcGFnZVxuICAgICAgICAgICAgZGlzcGxheUZvbGRlclRhc2tzKGZvbGRlcik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm1hdGNoIGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUZvbGRlcldpdGhJZChidXR0b25JZCkge1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBpZiAoYnV0dG9uSWQgPT09IGZvbGRlci5teUZvbGRlclV1aWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1dHRvbklkKTtcbiAgICAgICAgICAgIHN1cGVyRm9sZGVyLmRlbGV0ZUZvbGRlcihmb2xkZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRhc2tXaXRoSWQoYnV0dG9uSWQpIHtcbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgZm9sZGVyLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uSWQgPT09IHRhc2subXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIGZvbGRlci5kZWxldGVUYXNrKHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VUYXNrU3RhdHVzKHRhc2tJZCkge1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBmb2xkZXIudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGlmICh0YXNrSWQgPT09IHRhc2subXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIHRhc2suc2V0Q29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZFRhc2tXaXRoSWQoYnV0dG9uSWQpIHtcbiAgICBsZXQgb3V0cHV0O1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBmb2xkZXIudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGlmIChidXR0b25JZCA9PT0gdGFzay5teVRhc2tVdWlkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGFzaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQge1xuICAgIGRpc3BsYXlDdXJyZW50Rm9sZGVyV2l0aElkLFxuICAgIGRlbGV0ZUZvbGRlcldpdGhJZCxcbiAgICBkZWxldGVUYXNrV2l0aElkLFxuICAgIGNoYW5nZVRhc2tTdGF0dXMsXG4gICAgZ2V0VGFza0RpYWxvZyxcbiAgICBmaW5kVGFza1dpdGhJZCxcbiAgICBnZXRFZGl0RGlhbG9nLFxuICAgIHN1cGVyRm9sZGVyLFxuICAgIHNldExvY2FsU3RvcmFnZVxufSJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJhbmRvbVVVSUQiLCJjcnlwdG8iLCJiaW5kIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiRXJyb3IiLCJieXRlVG9IZXgiLCJpIiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJvcHRpb25zIiwiYnVmIiwib2Zmc2V0Iiwicm5kcyIsInJhbmRvbSIsImFyciIsInVuc2FmZVN0cmluZ2lmeSIsIlRhc2siLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwibXlUYXNrVXVpZCIsImNvbXBsZXRlU3RhdGUiLCJnZXRDb21wbGV0ZVN0YXRlIiwiY2hhbmdlUHJpb3JpdHkiLCJuZXdQcmlvcml0eSIsInNldENvbXBsZXRlIiwiZWRpdFRhc2siLCJuZXdUaXRsZSIsIm5ld0Rlc2NyaXB0aW9uIiwibmV3RHVlRGF0ZSIsInByaW50VGFzayIsImNvbnNvbGUiLCJsb2ciLCJGb2xkZXIiLCJteUZvbGRlclV1aWQiLCJ0YXNrcyIsImFkZFRhc2siLCJuZXdUYXNrTmFtZSIsImRpc3BsYXlUYXNrcyIsImxlbmd0aCIsImRlbGV0ZVRhc2siLCJ0YXNrTmFtZSIsInNwbGljZSIsIlN1cGVyRm9sZGVyIiwibXlTdXBlckZvbGRlclV1aWQiLCJmb2xkZXJzIiwiYWRkRm9sZGVyIiwibmV3Rm9sZGVyTmFtZSIsImRlbGV0ZUZvbGRlciIsImZvbGRlck5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiZGlzcGxheUZvbGRlclRhc2tzIiwiZm9yRWFjaCIsInRhc2siLCJsb2NhdGlvbiIsInRhc2tET00iLCJ0YXNrRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGFza1RpdGxlSW5EaXYiLCJ0YXNrRGVzY3JpcHRpb25JbkRpdiIsInRhc2tEdWVEYXRlSW5EaXYiLCJ0YXNrUHJpb3JpdHlJbkRpdiIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJ0YXNrRGVsZXRlQnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0aGlzQnV0dG9uIiwidGFyZ2V0IiwiZGVsZXRlVGFza1dpdGhJZCIsInZhbHVlIiwicGFyZW50Tm9kZSIsInJlbW92ZSIsInNldExvY2FsU3RvcmFnZSIsImNyZWF0ZVRhc2tEZWxldGVCdXR0b24iLCJ0YXNrRWRpdEJ0biIsImVkaXRGb3JtIiwiZ2V0RWxlbWVudEJ5SWQiLCJidG5Gb3JJZCIsImZvcm0iLCJ0YXNrVGl0bGVJbkZvcm0iLCJlbGVtZW50cyIsInRhc2tEZXNjcmlwdGlvbkluRm9ybSIsInRhc2tEdWVEYXRlSW5Gb3JtIiwidGFza1ByaW9yaXR5SW5Gb3JtIiwiY2hhbmdlVGFza0Zvcm1GaWVsZHMiLCJmaW5kVGFza1dpdGhJZCIsImdldEVkaXREaWFsb2ciLCJzaG93TW9kYWwiLCJjcmVhdGVUYXNrRWRpdEJ1dHRvbiIsInRhc2tTdGF0dXNCdG4iLCJlbGVtZW50IiwiY2hhbmdlVGFza1N0YXR1cyIsImNvbnRhaW5zIiwiY3JlYXRlVGFza1N0YXR1c0J1dHRvbiIsImNyZWF0ZVRhc2tFbGVtZW50IiwiYXBwZW5kVGFzayIsImFwcGVuZEZvbGRlciIsImZvbGRlckRPTSIsInNpZGViYXIiLCJxdWVyeVNlbGVjdG9yIiwiZm9sZGVyRGl2IiwiZm9sZGVyQnRuIiwiZm9sZGVyIiwiZm9sZGVyRGVsZXRlQnRuIiwiZGVsZXRlRm9sZGVyV2l0aElkIiwiY3JlYXRlRm9sZGVyRGVsZXRlQnV0dG9uIiwiY2hpbGRCdG4iLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJjdXJyZW50Rm9sZGVySWQiLCJkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZCIsImNyZWF0ZUZvbGRlckJ1dHRvbiIsInNpZGViYXJGb2xkZXJzIiwiaW5ib3hEaXYiLCJzdXBlckZvbGRlciIsImdldFRhc2tEaWFsb2ciLCJyZWNyZWF0ZVN1cGVyRm9sZGVyRnJvbU9iamVjdCIsImdlbmVyaWNPYmoiLCJmb2xkZXJEdXBlIiwidGFyZ2V0T2JqIiwicmVjcmVhdGVUYXNrT2JqIiwicmVjcmVhdGVGb2xkZXJGcm9tT2JqZWN0Iiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0ZW1wSWQiLCJidXR0b25JZCIsInRhc2tJZCIsIm91dHB1dCIsInJlc2V0Iiwic2VsZWN0Iiwic2VsZWN0T3B0aW9uIiwiY2xlYXJTZWxlY3RNZW51Iiwib3B0aW9uIiwiYXBwZW5kRHJvcGRvd24iLCJwYXJzZSIsImdldEl0ZW0iLCJwcmV2ZW50RGVmYXVsdCIsImZvbGRlckRpYWxvZyIsImZvbGRlclRpdGxlSW5Gb3JtIiwiZm9sZGVyRm9ybSIsImdldEZvbGRlckZvcm1JbmZvIiwibmV3Rm9sZGVyIiwiY2xvc2UiLCJzZWxlY3RlZEZvbGRlclZhbHVlIiwidGFza1RpdGxlIiwidGFza0Rlc2NyaXB0aW9uIiwidGFza0R1ZURhdGUiLCJ0YXNrUHJpb3JpdHkiLCJnZXRUYXNrRm9ybUluZm8iLCJuZXdUYXNrIiwiYnRuSWQiLCJnZXRUYXNrRWRpdEZvcm1JbmZvIiwic3VwZXJGb2xkZXJGcm9tTHMiLCJ0YXNrMSIsInRhc2syIiwidGFzazMiLCJpbmJveEZvbGRlciIsInRlc3RGb2xkZXIyIiwibG9hZFByZXNldEZvbGRlcnMiXSwic291cmNlUm9vdCI6IiJ9