(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{F:()=>k,H:()=>g});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));const l=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const l=(e=e||{}).random||(e.rng||d)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=l[e];return n}return function(e,t=0){return r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]}(l)};function a(e,t,n,o){let d=!1;e=e.toString(),t=t.toString();const r=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:()=>d,setComplete:()=>{d=!0},changePriority:r,editTask:(o,d,l,a)=>{e=o,t=d,n=l,r(a)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)}}}function i(e){let t=l(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{n.splice(e,1)}}}function c(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;k(t.value),t.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){g(e.myFolderUuid),console.log(e.title,e.myFolderUuid)})),n}(e);document.querySelector(".sidebar").appendChild(t)}const s=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}(),u=i("Inbox"),m=a("chores","wash dishes","nov 23","high"),f=a("movies","avatar","nov 29","med"),p=a("coding","todo list","dec 10","low");function y(){return document.getElementById("task-dialog")}function g(e){s.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",t.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),r=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,r.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(r),t}(e);document.getElementById(t).appendChild(n)}(e,["task-container"])})),console.log("match found"))}))}function k(e){s.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),s.deleteFolder(t),console.log("super folder after delete",s))}))}m.editTask("new thing","another new thing","new date","HIGH"),u.addTask(p),u.addTask(f),u.addTask(m),u.displayTasks(),s.addFolder(u),console.log(s),document.getElementById("open-task-modal-btn").addEventListener("click",(function(){y().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(s)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);c(o),s.addFolder(o),console.log(s.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:r}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),l=a(n,o,d,r);s.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(l)})),g(t),console.log(h),document.getElementById("main-form").reset(),y().close()})),console.log("Super folder before delete",s);let h=i("test");h.addTask(m),s.addFolder(h),c(h);let E=i("test2");E.addTask(f),E.addTask(m),E.addTask(p),s.addFolder(E),c(E)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,