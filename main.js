(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>v,F5:()=>h,k3:()=>E,HA:()=>g});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const r=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const r=(e=e||{}).random||(e.rng||d)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=r[e];return n}return function(e,t=0){return l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]}(r)};function a(e,t,n,o){let d=r(),l=!1;const a=()=>l;e=e.toString(),t=t.toString();const i=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:a,setComplete:()=>{l=0==a()},changePriority:i,editTask:(o,d,l,r)=>{e=o,t=d,n=l,i(r)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function i(e){let t=r(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function s(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),l=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,l.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(l),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;E(t.value),t.parentNode.remove()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(){})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){v(e.target.value)})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function c(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;h(t.value),t.parentNode.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return g(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);document.querySelector(".sidebar").appendChild(t)}const u=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}(),m=i("Inbox"),f=a("chores","wash dishes","nov 23","high"),p=a("movies","avatar","nov 29","med"),k=a("coding","todo list","dec 10","low");function y(){return document.getElementById("task-dialog")}function g(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",s(t),console.log("match found"))}))}function h(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),u.deleteFolder(t))}))}function E(e){u.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function v(e){u.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))})),console.log(f.getCompleteState())}f.editTask("new thing","another new thing","new date","HIGH"),m.addTask(k),m.addTask(p),m.addTask(f),m.displayTasks(),u.addFolder(m),console.log(u),document.getElementById("open-task-modal-btn").addEventListener("click",(function(){y().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(u)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);c(o),u.addFolder(o),console.log(u.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),r=a(n,o,d,l);u.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(r)})),g(t),console.log(T),document.getElementById("main-form").reset(),y().close()}));let T=i("test");T.addTask(f),u.addFolder(T),c(T);let U=i("test2");U.addTask(p),U.addTask(f),U.addTask(k),U.deleteTask(p),u.addFolder(U),c(U),console.log(U)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,