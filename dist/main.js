(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>g,F5:()=>k,k3:()=>y,HA:()=>p,QP:()=>v,mo:()=>f});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const r=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const r=(e=e||{}).random||(e.rng||d)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=r[e];return n}return function(e,t=0){return l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]}(r)};function a(e,t,n,o){let d=r(),l=!1;const a=()=>l;e=e.toString(),t=t.toString();const s=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:a,setComplete:()=>{l=0==a()},changePriority:s,editTask:(o,d,l,r)=>{e=o,t=d,n=l,s(r)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function s(e){let t=r(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function i(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),l=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,l.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(l),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;y(t.value),t.parentNode.remove()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(e){const t=document.getElementById("edit-form"),n=document.createElement("button");n.classList.add("edit-btn-id"),n.value=e.target.value,t.appendChild(n),function(e){const t=document.getElementById("edit-form"),n=t.elements["task-title"],o=t.elements["task-description"],d=t.elements["task-due-date"],l=t.elements["task-priority"];n.value=e.title,o.value=e.description,d.value=e.dueDate,l.value=e.priority}(v(e.target.value)),f().showModal()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;var n;g(t.value),(n=t).parentNode.classList.contains("complete-task")?n.parentNode.classList.remove("complete-task"):n.parentNode.classList.add("complete-task")})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function c(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;k(t.value),t.parentNode.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return p(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);document.querySelector(".sidebar").appendChild(t)}const u=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}();function m(){return document.getElementById("task-dialog")}function f(){return document.getElementById("edit-dialog")}function p(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",i(t),console.log("match found"))}))}function k(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),u.deleteFolder(t))}))}function y(e){u.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function g(e){u.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))}))}function v(e){let t;return u.folders.forEach((n=>{n.tasks.forEach((n=>{e===n.myTaskUuid&&(t=n)}))})),t}document.getElementById("open-task-modal-btn").addEventListener("click",(function(){m().reset,m().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(u)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=s(n);c(o),u.addFolder(o),console.log(u.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),r=a(n,o,d,l);u.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(r)})),p(t),document.getElementById("main-form").reset(),m().close()})),document.getElementById("task-edit-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".edit-btn-id"),{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("edit-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}();u.folders.forEach((e=>{e.tasks.forEach((r=>{t.value===r.myTaskUuid&&(r.editTask(n,o,d,l),p(e.myFolderUuid),console.log(r))}))})),t.remove(),f().close()}));const E=a("chores","wash dishes","nov 23","high"),h=a("movies","avatar","nov 29","med"),U=a("coding","todo list","dec 10","low");let T=s("Inbox");T.addTask(E),u.addFolder(T),c(T);let C=s("test2");C.addTask(h),C.addTask(E),C.addTask(U),C.deleteTask(h),u.addFolder(C),c(C),console.log(C)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUcsUUFBUXNHLEdBQ3BCSSxFQUFZMUcsUUFBUXdHLEdBQ3BCRSxFQUFZdEcsV0FBV21HLEdBQ3ZCbEMsRUFBWUUsVUFBVW1DLEdBQ3RCbEQsRUFBYWtELEdBRWIvRyxRQUFRQyxJQUFJOEcsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvZmFjdG9yaWVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2RvbS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEXG59OyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFzayh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KSB7XG5cbiAgICBsZXQgbXlUYXNrVXVpZCA9IHV1aWR2NCgpO1xuXG4gICAgbGV0IGNvbXBsZXRlU3RhdGUgPSBmYWxzZTtcblxuICAgIGNvbnN0IGdldENvbXBsZXRlU3RhdGUgPSAoKSA9PiBjb21wbGV0ZVN0YXRlO1xuXG4gICAgY29uc3Qgc2V0Q29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChnZXRDb21wbGV0ZVN0YXRlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlU3RhdGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGxldGVTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICB0aXRsZSA9IHRpdGxlLnRvU3RyaW5nKCk7XG4gICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi50b1N0cmluZygpO1xuXG4gICAgY29uc3QgY2hhbmdlUHJpb3JpdHkgPSAobmV3UHJpb3JpdHkpID0+IHtcbiAgICAgICAgcHJpb3JpdHkgPSBuZXdQcmlvcml0eTtcbiAgICB9XG5cbiAgICBjb25zdCBlZGl0VGFzayA9IChuZXdUaXRsZSwgbmV3RGVzY3JpcHRpb24sIG5ld0R1ZURhdGUsIG5ld1ByaW9yaXR5KSA9PiB7XG4gICAgICAgIHRpdGxlID0gbmV3VGl0bGU7XG4gICAgICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgICAgIGR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICBjaGFuZ2VQcmlvcml0eShuZXdQcmlvcml0eSk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJpbnRUYXNrID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgVGFzayB0aXRsZSAtICR7dGl0bGV9LCBEZXNjIC0gJHtkZXNjcmlwdGlvbn0sIERhdGUgLSAke2R1ZURhdGV9LCBQcmlvcml0eSAtICR7cHJpb3JpdHl9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IHRpdGxlKCkge3JldHVybiB0aXRsZX0sIFxuICAgICAgICBnZXQgZGVzY3JpcHRpb24oKSB7cmV0dXJuIGRlc2NyaXB0aW9ufSwgXG4gICAgICAgIGdldCBkdWVEYXRlKCkge3JldHVybiBkdWVEYXRlfSwgXG4gICAgICAgIGdldCBwcmlvcml0eSgpIHtyZXR1cm4gcHJpb3JpdHl9LFxuICAgICAgICBnZXRDb21wbGV0ZVN0YXRlLFxuICAgICAgICBzZXRDb21wbGV0ZSwgXG4gICAgICAgIGNoYW5nZVByaW9yaXR5LFxuICAgICAgICBlZGl0VGFzayxcbiAgICAgICAgcHJpbnRUYXNrLFxuICAgICAgICBteVRhc2tVdWlkXG4gICAgfTtcbn07XG5cblxuZXhwb3J0IGZ1bmN0aW9uIEZvbGRlcih0aXRsZSkge1xuICAgIFxuXG4gICAgbGV0IG15Rm9sZGVyVXVpZCA9IHV1aWR2NCgpO1xuICAgIGxldCB0YXNrcyA9IFtdO1xuXG4gICAgY29uc3QgYWRkVGFzayA9IChuZXdUYXNrTmFtZSkgPT4ge1xuICAgICAgICB0YXNrcy5wdXNoKG5ld1Rhc2tOYW1lKTtcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwbGF5VGFza3MgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYXNrICR7aX0gLSAke3Rhc2tzW2ldLnRpdGxlfSwgJHt0YXNrc1tpXS5kdWVEYXRlfSwgJHt0YXNrc1tpXS5wcmlvcml0eX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZVRhc2sgPSAodGFza05hbWUpID0+IHtcbiAgICAgICAgLy8gdGFza3Muc3BsaWNlKHRhc2tOYW1lLCAxKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRhc2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAodGFza3NbaV0ubXlUYXNrVXVpZCA9PT0gdGFza05hbWUubXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIHRhc2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFxuICAgIHJldHVybiB7dGl0bGUsIHRhc2tzLCBteUZvbGRlclV1aWQsIGFkZFRhc2ssIGRpc3BsYXlUYXNrcywgZGVsZXRlVGFza307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTdXBlckZvbGRlcigpIHtcbiAgICBsZXQgZm9sZGVycyA9IFtdXG5cbiAgICBjb25zdCBhZGRGb2xkZXIgPSAobmV3Rm9sZGVyTmFtZSkgPT4ge1xuICAgICAgICBmb2xkZXJzLnB1c2gobmV3Rm9sZGVyTmFtZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlRm9sZGVyID0gKGZvbGRlck5hbWUpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZvbGRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGlmIChmb2xkZXJzW2ldLm15Rm9sZGVyVXVpZCA9PT0gZm9sZGVyTmFtZS5teUZvbGRlclV1aWQpIHtcbiAgICAgICAgICAgICAgICBmb2xkZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7Zm9sZGVycywgYWRkRm9sZGVyLCBkZWxldGVGb2xkZXJ9XG59IiwiaW1wb3J0IHtcbiAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZCxcbiAgICBkZWxldGVGb2xkZXJXaXRoSWQsXG4gICAgZGVsZXRlVGFza1dpdGhJZCxcbiAgICBjaGFuZ2VUYXNrU3RhdHVzLFxuICAgIGdldFRhc2tEaWFsb2csXG4gICAgZmluZFRhc2tXaXRoSWQsXG4gICAgZ2V0RWRpdERpYWxvZ1xufSBmcm9tICcuLi9pbmRleC5qcyc7XG5cblxuLy8gQ3JlYXRlIGFsbCBlbGVtZW50cyBmb3IgZWFjaCB0YXNrIHByb3BlcnR5IGFuZCBjaGFuZ2UgdGV4dCBjb250ZW50IHRvIGNvcnJlc3BvbmRpbmcgdmFsdWVcbi8vIFRoZW4gYWRkIHRoZW0gdG8gYSBtYWluIGRpdiBhbmQgcmV0dXJuXG5mdW5jdGlvbiBjcmVhdGVUYXNrRWxlbWVudCh0YXNrTmFtZSkge1xuICAgIGNvbnN0IHRhc2tEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCB0YXNrVGl0bGVJbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25JbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCB0YXNrRHVlRGF0ZUluRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IHRhc2tQcmlvcml0eUluRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIFxuICAgIHRhc2tEaXYuY2xhc3NMaXN0LmFkZCgndGFzay1kaXYnKTtcbiAgICB0YXNrVGl0bGVJbkRpdi50ZXh0Q29udGVudCA9IHRhc2tOYW1lLnRpdGxlO1xuICAgIHRhc2tEZXNjcmlwdGlvbkluRGl2LnRleHRDb250ZW50ID0gdGFza05hbWUuZGVzY3JpcHRpb247XG4gICAgdGFza0R1ZURhdGVJbkRpdi50ZXh0Q29udGVudCA9IHRhc2tOYW1lLmR1ZURhdGU7XG4gICAgdGFza1ByaW9yaXR5SW5EaXYudGV4dENvbnRlbnQgPSB0YXNrTmFtZS5wcmlvcml0eTtcblxuICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQodGFza1RpdGxlSW5EaXYpO1xuICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQodGFza0Rlc2NyaXB0aW9uSW5EaXYpO1xuICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQodGFza0R1ZURhdGVJbkRpdik7XG4gICAgdGFza0Rpdi5hcHBlbmRDaGlsZCh0YXNrUHJpb3JpdHlJbkRpdik7XG4gICAgY3JlYXRlVGFza0RlbGV0ZUJ1dHRvbih0YXNrRGl2KS52YWx1ZSA9IHRhc2tOYW1lLm15VGFza1V1aWQ7XG4gICAgY3JlYXRlVGFza0VkaXRCdXR0b24odGFza0RpdikudmFsdWUgPSB0YXNrTmFtZS5teVRhc2tVdWlkO1xuICAgIGNyZWF0ZVRhc2tTdGF0dXNCdXR0b24odGFza0RpdikudmFsdWUgPSB0YXNrTmFtZS5teVRhc2tVdWlkO1xuXG4gICAgcmV0dXJuIHRhc2tEaXY7XG59XG5cbi8vIFRha2UgaW4gdGFzayBhbmQgd2hlcmUgdG8gYXBwZW5kXG4vLyBDcmVhdGUgdGhlIHRhc2sgdXNpbmcgY3JlYXRlVGFza0VsZW1lbnQgYW5kIGFzc2lnbiB0byB2YXJpYWJsZVxuLy8gVGFyZ2V0IGVsZW1lbnQgdG8gYXBwZW5kIHRvIGFuZCBhcHBlbmRcbmZ1bmN0aW9uIGFwcGVuZFRhc2sodGFza05hbWUsIGxvY2F0aW9uKSB7XG4gICAgbGV0IHRhc2tET00gPSBjcmVhdGVUYXNrRWxlbWVudCh0YXNrTmFtZSk7XG5cbiAgICBjb25zdCBsb2NhdGlvbkRPTSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uKTtcbiAgICBsb2NhdGlvbkRPTS5hcHBlbmRDaGlsZCh0YXNrRE9NKTtcbn1cblxuLy8gVGFrZSBpbiBmb2xkZXIgbmFtZSB0aGVuIGxvb3AgdGhyb3VnaCB0YXNrcyBpbnNpZGUgZm9sZGVyIHRvIGFwcGVuZCB0byBzY3JlZW5cbmZ1bmN0aW9uIGRpc3BsYXlGb2xkZXJUYXNrcyhmb2xkZXJOYW1lKSB7XG4gICAgZm9sZGVyTmFtZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBhcHBlbmRUYXNrKHRhc2ssIFsndGFzay1jb250YWluZXInXSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRhc2tGb3JtSW5mbygpIHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4tZm9ybScpO1xuXG4gICAgY29uc3QgdGFza1RpdGxlSW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay10aXRsZSddO1xuICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbkluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZGVzY3JpcHRpb24nXTtcbiAgICBjb25zdCB0YXNrRHVlRGF0ZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stZHVlLWRhdGUnXTtcbiAgICBjb25zdCB0YXNrUHJpb3JpdHlJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLXByaW9yaXR5J107XG4gICAgXG4gICAgbGV0IHRhc2tUaXRsZSA9IHRhc2tUaXRsZUluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza0Rlc2NyaXB0aW9uID0gdGFza0Rlc2NyaXB0aW9uSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrRHVlRGF0ZSA9IHRhc2tEdWVEYXRlSW5Gb3JtLnZhbHVlO1xuICAgIGxldCB0YXNrUHJpb3JpdHkgPSB0YXNrUHJpb3JpdHlJbkZvcm0udmFsdWU7XG5cbiAgICByZXR1cm4ge3Rhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5fTtcbn0gXG5cbmZ1bmN0aW9uIGdldFRhc2tFZGl0Rm9ybUluZm8oKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWZvcm0nKTtcblxuICAgIGNvbnN0IHRhc2tUaXRsZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stdGl0bGUnXTtcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25JbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWRlc2NyaXB0aW9uJ107XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWR1ZS1kYXRlJ107XG4gICAgY29uc3QgdGFza1ByaW9yaXR5SW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1wcmlvcml0eSddO1xuICAgIFxuICAgIGxldCB0YXNrVGl0bGUgPSB0YXNrVGl0bGVJbkZvcm0udmFsdWU7XG4gICAgbGV0IHRhc2tEZXNjcmlwdGlvbiA9IHRhc2tEZXNjcmlwdGlvbkluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza0R1ZURhdGUgPSB0YXNrRHVlRGF0ZUluRm9ybS52YWx1ZTtcbiAgICBsZXQgdGFza1ByaW9yaXR5ID0gdGFza1ByaW9yaXR5SW5Gb3JtLnZhbHVlO1xuXG4gICAgcmV0dXJuIHt0YXNrVGl0bGUsIHRhc2tEZXNjcmlwdGlvbiwgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eX07XG59IFxuXG4vLyBDcmVhdGUgYnV0dG9uIHRvIGhvbGQgZm9sZGVyIGFuZCB0aXRsZVxuLy8gQWRkIHRpdGxlIHRvIGRpdiBhbmQgcmV0dXJuXG5mdW5jdGlvbiBjcmVhdGVGb2xkZXJCdXR0b24oZm9sZGVyTmFtZSkge1xuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhcicpO1xuICAgIGNvbnN0IGZvbGRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGZvbGRlckJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXG4gICAgZm9sZGVyRGl2LmNsYXNzTGlzdC5hZGQoJ2ZvbGRlci1kaXYnKTtcbiAgICBmb2xkZXJCdG4uY2xhc3NMaXN0LmFkZCgnZm9sZGVyLWJ1dHRvbicpO1xuICAgIGZvbGRlckJ0bi50ZXh0Q29udGVudCA9IGZvbGRlck5hbWUudGl0bGU7XG4gICAgZm9sZGVyQnRuLnZhbHVlID0gZm9sZGVyTmFtZS5teUZvbGRlclV1aWQ7XG5cbiAgICBmb2xkZXJEaXYuYXBwZW5kQ2hpbGQoZm9sZGVyQnRuKTtcbiAgICBcbiAgICAvLyBDcmVhdGUgdGhlIGRlbCBidG4gYW5kICBhc3NpZ24gc2FtZSBpZCBhcyBmb2xkZXIgdG8gaXRcbiAgICBjcmVhdGVGb2xkZXJEZWxldGVCdXR0b24oZm9sZGVyRGl2KS52YWx1ZSA9IGZvbGRlck5hbWUubXlGb2xkZXJVdWlkO1xuXG4gICAgc2lkZWJhci5hcHBlbmRDaGlsZChmb2xkZXJEaXYpO1xuXG4gICAgZm9sZGVyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBjdXJyZW50Rm9sZGVySWQgPSBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZDtcbiAgICAgICAgZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQoZm9sZGVyTmFtZS5teUZvbGRlclV1aWQpO1xuICAgICAgICBjb25zb2xlLmxvZyhmb2xkZXJOYW1lLnRpdGxlLCBmb2xkZXJOYW1lLm15Rm9sZGVyVXVpZCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50Rm9sZGVySWQ7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGZvbGRlckRpdjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9sZGVyRGVsZXRlQnV0dG9uKGZvbGRlcikge1xuICAgIGNvbnN0IGZvbGRlckRlbGV0ZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXG4gICAgZm9sZGVyRGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoJ2ZvbGRlci1kZWxldGUtYnRuJyk7XG4gICAgZm9sZGVyRGVsZXRlQnRuLnRleHRDb250ZW50ID0gJy0nO1xuXG4gICAgZm9sZGVyLmFwcGVuZENoaWxkKGZvbGRlckRlbGV0ZUJ0bik7XG5cbiAgICBmb2xkZXJEZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGxldCB0aGlzQnV0dG9uID0gZS50YXJnZXQ7XG4gICAgICAgIGRlbGV0ZUZvbGRlcldpdGhJZCh0aGlzQnV0dG9uLnZhbHVlKTtcbiAgICAgICAgdGhpc0J1dHRvbi5wYXJlbnROb2RlLnJlbW92ZSgpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gZm9sZGVyRGVsZXRlQnRuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrRGVsZXRlQnV0dG9uKHRhc2spIHtcbiAgICBjb25zdCB0YXNrRGVsZXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICB0YXNrRGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoJ3Rhc2stZGVsZXRlLWJ0bicpO1xuICAgIHRhc2tEZWxldGVCdG4udGV4dENvbnRlbnQgPSAnLSc7XG5cbiAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tEZWxldGVCdG4pO1xuXG4gICAgdGFza0RlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgbGV0IHRoaXNCdXR0b24gPSBlLnRhcmdldDtcbiAgICAgICAgZGVsZXRlVGFza1dpdGhJZCh0aGlzQnV0dG9uLnZhbHVlKTtcbiAgICAgICAgdGhpc0J1dHRvbi5wYXJlbnROb2RlLnJlbW92ZSgpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gdGFza0RlbGV0ZUJ0bjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0VkaXRCdXR0b24odGFzaykge1xuICAgIGNvbnN0IHRhc2tFZGl0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICB0YXNrRWRpdEJ0bi5jbGFzc0xpc3QuYWRkKCd0YXNrLWVkaXQtYnRuJyk7XG4gICAgdGFza0VkaXRCdG4udGV4dENvbnRlbnQgPSAnKyc7XG5cbiAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tFZGl0QnRuKTtcblxuICAgIHRhc2tFZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBDcmVhdGUgYSBidXR0b24gdG8gaG9sZCBJZCB2YWx1ZVxuICAgICAgICBjb25zdCBlZGl0Rm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWZvcm0nKTtcbiAgICAgICAgY29uc3QgYnRuRm9ySWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgICAgICBidG5Gb3JJZC5jbGFzc0xpc3QuYWRkKCdlZGl0LWJ0bi1pZCcpO1xuICAgICAgICBidG5Gb3JJZC52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIGVkaXRGb3JtLmFwcGVuZENoaWxkKGJ0bkZvcklkKTtcblxuICAgICAgICAvLyBDaGFuZ2UgZm9ybSBmaWVsZHMgdG8gdGFzayBpbmZvIGFuZCBvcGVuIG1vZGFsXG4gICAgICAgIGNoYW5nZVRhc2tGb3JtRmllbGRzKGZpbmRUYXNrV2l0aElkKGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIGdldEVkaXREaWFsb2coKS5zaG93TW9kYWwoKTtcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRhc2tFZGl0QnRuO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VUYXNrRm9ybUZpZWxkcyh0YXNrKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWZvcm0nKTtcblxuICAgIGNvbnN0IHRhc2tUaXRsZUluRm9ybSA9IGZvcm0uZWxlbWVudHNbJ3Rhc2stdGl0bGUnXTtcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25JbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWRlc2NyaXB0aW9uJ107XG4gICAgY29uc3QgdGFza0R1ZURhdGVJbkZvcm0gPSBmb3JtLmVsZW1lbnRzWyd0YXNrLWR1ZS1kYXRlJ107XG4gICAgY29uc3QgdGFza1ByaW9yaXR5SW5Gb3JtID0gZm9ybS5lbGVtZW50c1sndGFzay1wcmlvcml0eSddO1xuXG4gICAgdGFza1RpdGxlSW5Gb3JtLnZhbHVlID0gdGFzay50aXRsZTtcbiAgICB0YXNrRGVzY3JpcHRpb25JbkZvcm0udmFsdWUgPSB0YXNrLmRlc2NyaXB0aW9uO1xuICAgIHRhc2tEdWVEYXRlSW5Gb3JtLnZhbHVlID0gdGFzay5kdWVEYXRlO1xuICAgIHRhc2tQcmlvcml0eUluRm9ybS52YWx1ZSA9IHRhc2sucHJpb3JpdHk7XG59IFxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrU3RhdHVzQnV0dG9uKHRhc2spIHtcbiAgICBjb25zdCB0YXNrU3RhdHVzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICB0YXNrU3RhdHVzQnRuLmNsYXNzTGlzdC5hZGQoJ3Rhc2stc3RhdHVzLWJ0bicpO1xuICAgIHRhc2tTdGF0dXNCdG4udGV4dENvbnRlbnQgPSAn4pyUJztcblxuICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza1N0YXR1c0J0bik7XG5cbiAgICB0YXNrU3RhdHVzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgdGhpc0J1dHRvbiA9IGUudGFyZ2V0O1xuICAgICAgICBjaGFuZ2VUYXNrU3RhdHVzKHRoaXNCdXR0b24udmFsdWUpO1xuICAgICAgICB0b2dnbGVDb21wbGV0ZVN0eWxlKHRoaXNCdXR0b24pO1xuICAgICAgICAvLyB0aGlzQnV0dG9uLnBhcmVudE5vZGUuc3R5bGUuY29sb3IgPSAncmVkJztcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRhc2tTdGF0dXNCdG47XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlU3R5bGUoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucygnY29tcGxldGUtdGFzaycpKSB7XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZS10YXNrJylcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY29tcGxldGUtdGFzaycpO1xuICAgIH1cbn1cblxuLy8gVGFrZSBpbiBmb2xkZXIgbmFtZSBhbmQgY3JlYXRlIGZvbGRlciB1c2luZyBmdW5jdGlvblxuLy8gQXBwZW5kIHRvIHNpZGViYXJcbmZ1bmN0aW9uIGFwcGVuZEZvbGRlcihmb2xkZXJOYW1lKSB7XG4gICAgbGV0IGZvbGRlckRPTSA9IGNyZWF0ZUZvbGRlckJ1dHRvbihmb2xkZXJOYW1lKTtcbiAgICBcbiAgICBjb25zdCBzaWRlYmFyRm9sZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyJyk7XG4gICAgc2lkZWJhckZvbGRlcnMuYXBwZW5kQ2hpbGQoZm9sZGVyRE9NKTtcbn1cblxuLy8gVGFrZSBpbiBzdXBlciBmb2xkZXIgbmFtZSB0byBsb29wIHRocm91Z2ggZWFjaCBmb2xkZXIgYW5kIGFwcGVuZCB0byBzaWRlYmFyXG5mdW5jdGlvbiBkaXNwbGF5Rm9sZGVycyhzdXBlckZvbGRlck5hbWUpIHtcbiAgICAvLyBjbGVhclNpZGViYXIoKTtcbiAgICBzdXBlckZvbGRlck5hbWUuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGFwcGVuZEZvbGRlcihmb2xkZXIpO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGdldEZvbGRlckZvcm1JbmZvKCkge1xuICAgIGNvbnN0IGZvbGRlckZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLWZvcm0nKTtcblxuICAgIGNvbnN0IGZvbGRlclRpdGxlSW5Gb3JtID0gZm9sZGVyRm9ybS5lbGVtZW50c1snZm9sZGVyLXRpdGxlJ10udmFsdWU7XG5cbiAgICByZXR1cm4ge2ZvbGRlckZvcm0sIGZvbGRlclRpdGxlSW5Gb3JtfTtcbn1cblxuZnVuY3Rpb24gY2xlYXJUYXNrQ29udGFpbmVyKCkge1xuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1jb250YWluZXInKTtcblxuICAgIHRhc2tDb250YWluZXIudGV4dENvbnRlbnQgPSAnJztcbn1cblxuZnVuY3Rpb24gYXBwZW5kRHJvcGRvd24oc3VwZXJGb2xkZXIpIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItc2VsZWN0aW9uJyk7XG5cbiAgICBjbGVhclNlbGVjdE1lbnUoc2VsZWN0KTtcblxuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGZvbGRlci50aXRsZTtcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gZm9sZGVyLm15Rm9sZGVyVXVpZDsgLy8gZmlndXJlIG91dCBpZiB0aGlzIGlzIGdvb2Qgd2F5IHRvIHNlbGVjdFxuICAgICAgICAvLyBvcHRpb24uc2V0QXR0cmlidXRlKCdpbmRleCcsIGluZGV4KyspO1xuXG4gICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGNsZWFyU2VsZWN0TWVudShzZWxlY3RPcHRpb24pIHtcbiAgICBmb3IgKGxldCBpID0gc2VsZWN0T3B0aW9uLm9wdGlvbnMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgICAgICBzZWxlY3RPcHRpb24ucmVtb3ZlKDApO1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBnZXRUYXNrRm9ybUluZm8sXG4gICAgZ2V0VGFza0VkaXRGb3JtSW5mbyxcbiAgICBnZXRGb2xkZXJGb3JtSW5mbyxcbiAgICBjcmVhdGVUYXNrRWxlbWVudCxcbiAgICBjcmVhdGVGb2xkZXJCdXR0b24sXG4gICAgYXBwZW5kRm9sZGVyLFxuICAgIGRpc3BsYXlGb2xkZXJUYXNrcyxcbiAgICBhcHBlbmRUYXNrLFxuICAgIGRpc3BsYXlGb2xkZXJzLFxuICAgIGNsZWFyVGFza0NvbnRhaW5lcixcbiAgICBhcHBlbmREcm9wZG93bixcbiAgICBjbGVhclNlbGVjdE1lbnVcbn0iLCJpbXBvcnQge1xuICAgIFRhc2ssXG4gICAgRm9sZGVyLFxuICAgIFN1cGVyRm9sZGVyXG59IGZyb20gJy4vbW9kdWxlcy9mYWN0b3JpZXMuanMnO1xuXG5pbXBvcnQge1xuICAgIGdldFRhc2tGb3JtSW5mbyxcbiAgICBnZXRUYXNrRWRpdEZvcm1JbmZvLFxuICAgIGdldEZvbGRlckRpYWxvZyxcbiAgICBnZXRGb2xkZXJGb3JtSW5mbyxcbiAgICBjcmVhdGVUYXNrRWxlbWVudCxcbiAgICBjcmVhdGVGb2xkZXJCdXR0b24sXG4gICAgYXBwZW5kRm9sZGVyLFxuICAgIGRpc3BsYXlGb2xkZXJUYXNrcyxcbiAgICBhcHBlbmRUYXNrLFxuICAgIGRpc3BsYXlGb2xkZXJzLFxuICAgIGNsZWFyVGFza0NvbnRhaW5lcixcbiAgICBhcHBlbmREcm9wZG93bixcbiAgICBjbGVhclNlbGVjdE1lbnVcblxufSBmcm9tICcuL21vZHVsZXMvZG9tLmpzJztcblxuaW1wb3J0IHsgZm9ybWF0RGlzdGFuY2UsIHN1YkRheXMgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuLy9TdXBlciBGb2xkZXIgXG5jb25zdCBzdXBlckZvbGRlciA9IFN1cGVyRm9sZGVyKCk7XG5cblxuXG5cbi8vIE9wZW4gdGFzayBtb2RhbCB3aGVuIGNsaWNrZWRcbmNvbnN0IG9wZW5UYXNrTW9kYWxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbi10YXNrLW1vZGFsLWJ0bicpO1xub3BlblRhc2tNb2RhbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGdldFRhc2tEaWFsb2coKS5yZXNldDtcbiAgICBnZXRUYXNrRGlhbG9nKCkuc2hvd01vZGFsKCk7XG4gICAgYXBwZW5kRHJvcGRvd24oc3VwZXJGb2xkZXIpO1xufSk7XG5cbi8vIEdldCB0YXNrIGRpYWxvZyBhbmQgcmV0dXJuIFxuZnVuY3Rpb24gZ2V0VGFza0RpYWxvZygpIHtcbiAgICBjb25zdCB0YXNrRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stZGlhbG9nJyk7XG5cbiAgICByZXR1cm4gdGFza0RpYWxvZztcbn1cblxuZnVuY3Rpb24gZ2V0RWRpdERpYWxvZygpIHtcbiAgICBjb25zdCBlZGl0RGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXQtZGlhbG9nJyk7XG5cbiAgICByZXR1cm4gZWRpdERpYWxvZztcbn1cblxuLy8gT3BlbiBmb2xkZXIgbW9kYWwgd2hlbiBjbGlja2VkXG5jb25zdCBhZGRGb2xkZXJCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLWFkZC1idG4nKTtcbmFkZEZvbGRlckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGNvbnN0IGZvbGRlckRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItZGlhbG9nJyk7XG4gICAgZm9sZGVyRGlhbG9nLnNob3dNb2RhbCgpO1xuICAgIFxufSk7XG5cbi8vIEV2ZW50IGxpc3RlbmVyIHRvIHN1Ym1pdCBmb2xkZXIgZm9ybVxuLy8gQ3JlYXRlIGEgbmV3IGZvbGRlciBpbnN0YW5jZSB3aXRoIGluZm8gZnJvbSBmb3JtXG4vLyBBZGQgdG8gRE9NXG4vLyBBZGQgdG8gc3VwZXIgZm9sZGVyXG4vLyBTaG91bGQgYmUgZG9uZSBvbiB0aGUgZm9ybSBpbnN0ZWFkIG9mIGJ1dHRvbiBidXQgTUROIGV4YW1wbGUgd2l0aCBkaWFsb2cgZGlkIGl0IHRoaXMgd2F5XG5jb25zdCBmb2xkZXJTdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyLWNvbmZpcm0tYnRuJyk7XG5mb2xkZXJTdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFxuICAgIGNvbnN0IGZvbGRlckRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItZGlhbG9nJyk7XG4gICAgY29uc3Qge2ZvbGRlclRpdGxlSW5Gb3JtfSA9IGdldEZvbGRlckZvcm1JbmZvKCk7XG5cbiAgICBsZXQgbmV3Rm9sZGVyID0gRm9sZGVyKGZvbGRlclRpdGxlSW5Gb3JtKTtcbiAgICBhcHBlbmRGb2xkZXIobmV3Rm9sZGVyKTtcbiAgICBcbiAgICBzdXBlckZvbGRlci5hZGRGb2xkZXIobmV3Rm9sZGVyKTtcbiAgICBjb25zb2xlLmxvZyhzdXBlckZvbGRlci5mb2xkZXJzKTtcblxuICAgIGZvbGRlckRpYWxvZy5jbG9zZSgpO1xufSk7XG5cbi8vIEdvIHRocm91Z2ggYWxsIGZvbGRlcnMgYW5kIGNoZWNrIGlmIHRoZSBjbGlja2VkIGJ1dHRvbiB2YWx1ZSBtYXRjaGVzIGZvbGRlciB2YWx1ZVxuLy8gdGhlbiBkaXNwbGF5IHRhc2tzIG9mIHRoYXQgZm9sZGVyIHRvIHNjcmVlblxuZnVuY3Rpb24gZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQodGVtcElkKSB7XG5cbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgaWYgKHRlbXBJZCA9PT0gZm9sZGVyLm15Rm9sZGVyVXVpZCkge1xuICAgICAgICAgICAgY2xlYXJUYXNrQ29udGFpbmVyKCk7XG4gICAgICAgICAgICAvL2Rpc3BsYXkgYWxsIHRhc2tzIG9mIHRoaXMgZm9sZGVyIHRvIHBhZ2VcbiAgICAgICAgICAgIGRpc3BsYXlGb2xkZXJUYXNrcyhmb2xkZXIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJtYXRjaCBmb3VuZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCB0YXNrQWRkQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stYWRkLWJ0bicpO1xuLy8gQ3JlYXRlIG5ldyB0YXNrIGluc3RhbmNlIHVzaW5nIGluZm8gZnJvbSBmb3JtXG50YXNrQWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIC8vIEdldCB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgZmllbGQgKElkIGJlY2F1c2UgdmFsdWUgaXMgc2V0IHRvIGlkIGluIGRvbS5qcylcbiAgICBjb25zdCBzZWxlY3RlZEZvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb2xkZXItc2VsZWN0aW9uJyk7XG4gICAgY29uc3Qgc2VsZWN0ZWRGb2xkZXJWYWx1ZSA9IHNlbGVjdGVkRm9sZGVyLnZhbHVlO1xuICAgIC8vIEdldCB2YWx1ZXMgb2YgdGhlIGZvcm1cbiAgICBjb25zdCB7dGFza1RpdGxlLCB0YXNrRGVzY3JpcHRpb24sIHRhc2tEdWVEYXRlLCB0YXNrUHJpb3JpdHl9ID0gZ2V0VGFza0Zvcm1JbmZvKCk7XG5cbiAgICAvLyBDcmVhdGUgbmV3IHRhc2sgYW5kIGxvb3AgdGhyb3VnaCBmb2xkZXIgdG8gZmluZCBtYXRjaGluZyBJZCBhbmQgYWRkXG4gICAgY29uc3QgbmV3VGFzayA9IFRhc2sodGFza1RpdGxlLCB0YXNrRGVzY3JpcHRpb24sIHRhc2tEdWVEYXRlLCB0YXNrUHJpb3JpdHkpO1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBpZiAoc2VsZWN0ZWRGb2xkZXJWYWx1ZSA9PT0gZm9sZGVyLm15Rm9sZGVyVXVpZCkge1xuICAgICAgICAgICAgZm9sZGVyLmFkZFRhc2sobmV3VGFzayk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgdGFza3Mgb2YgdGhlIGZvbGRlciB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWQgdG8gYXZvaWQgcmVsb2FkaW5nIGZvbGRlclxuICAgIGRpc3BsYXlDdXJyZW50Rm9sZGVyV2l0aElkKHNlbGVjdGVkRm9sZGVyVmFsdWUpO1xuXG4gICAgLy8gQ2xlYXIgZm9ybSBmaWVsZHNcbiAgICBjb25zdCB0YXNrRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLWZvcm0nKTtcbiAgICB0YXNrRm9ybS5yZXNldCgpO1xuICAgIGdldFRhc2tEaWFsb2coKS5jbG9zZSgpO1xufSlcblxuLy8gU2VsZWN0IHRoZSBidXR0b24gd2l0aCBJZCBhbmQgZmluZCB0YXNrIHdpdGggdGhhdCBJZFxuLy8gQ2hhbmdlIHRoZSBpbmZvIG9mIHRoYXQgdGFzayBhbmQgdXBkYXRlIGZvbGRlclxuLy8gRGVsZXRlIGJ1dHRvbiBhZnRlciBhbmQgY2xvc2VcbmNvbnN0IHRhc2tFZGl0Q29uZmlybUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWVkaXQtYnRuJyk7XG50YXNrRWRpdENvbmZpcm1CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFxuICAgIGNvbnN0IGJ0bklkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtYnRuLWlkJyk7XG5cbiAgICBjb25zdCB7dGFza1RpdGxlLCB0YXNrRGVzY3JpcHRpb24sIHRhc2tEdWVEYXRlLCB0YXNrUHJpb3JpdHl9ID0gZ2V0VGFza0VkaXRGb3JtSW5mbygpO1xuXG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGZvbGRlci50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgaWYgKGJ0bklkLnZhbHVlID09PSB0YXNrLm15VGFza1V1aWQpIHtcbiAgICAgICAgICAgICAgICB0YXNrLmVkaXRUYXNrKHRhc2tUaXRsZSwgdGFza0Rlc2NyaXB0aW9uLCB0YXNrRHVlRGF0ZSwgdGFza1ByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q3VycmVudEZvbGRlcldpdGhJZChmb2xkZXIubXlGb2xkZXJVdWlkKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcblxuICAgIGJ0bklkLnJlbW92ZSgpO1xuICAgIGdldEVkaXREaWFsb2coKS5jbG9zZSgpO1xuXG59KVxuXG5mdW5jdGlvbiBkZWxldGVGb2xkZXJXaXRoSWQoYnV0dG9uSWQpIHtcbiAgICBzdXBlckZvbGRlci5mb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgaWYgKGJ1dHRvbklkID09PSBmb2xkZXIubXlGb2xkZXJVdWlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhidXR0b25JZCk7XG4gICAgICAgICAgICBzdXBlckZvbGRlci5kZWxldGVGb2xkZXIoZm9sZGVyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBkZWxldGVUYXNrV2l0aElkKGJ1dHRvbklkKSB7XG4gICAgc3VwZXJGb2xkZXIuZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGZvbGRlci50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbklkID09PSB0YXNrLm15VGFza1V1aWQpIHtcbiAgICAgICAgICAgICAgICBmb2xkZXIuZGVsZXRlVGFzayh0YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBjaGFuZ2VUYXNrU3RhdHVzKHRhc2tJZCkge1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBmb2xkZXIudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGlmICh0YXNrSWQgPT09IHRhc2subXlUYXNrVXVpZCkge1xuICAgICAgICAgICAgICAgIHRhc2suc2V0Q29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZFRhc2tXaXRoSWQoYnV0dG9uSWQpIHtcbiAgICBsZXQgb3V0cHV0O1xuICAgIHN1cGVyRm9sZGVyLmZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBmb2xkZXIudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGlmIChidXR0b25JZCA9PT0gdGFzay5teVRhc2tVdWlkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGFzaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuLy8gVGVzdCB0YXNrc1xuY29uc3QgdGFzazEgPSBUYXNrKCdjaG9yZXMnLCAnd2FzaCBkaXNoZXMnLCAnbm92IDIzJywgJ2hpZ2gnKTtcbmNvbnN0IHRhc2syID0gVGFzaygnbW92aWVzJywgJ2F2YXRhcicsICdub3YgMjknLCAnbWVkJyk7XG5jb25zdCB0YXNrMyA9IFRhc2soJ2NvZGluZycsICd0b2RvIGxpc3QnLCAnZGVjIDEwJywgJ2xvdycpO1xuXG5sZXQgaW5ib3hGb2xkZXIgPSBGb2xkZXIoJ0luYm94Jyk7XG5pbmJveEZvbGRlci5hZGRUYXNrKHRhc2sxKTtcbnN1cGVyRm9sZGVyLmFkZEZvbGRlcihpbmJveEZvbGRlcik7XG5hcHBlbmRGb2xkZXIoaW5ib3hGb2xkZXIpO1xuXG5sZXQgdGVzdEZvbGRlcjIgPSBGb2xkZXIoJ3Rlc3QyJyk7XG50ZXN0Rm9sZGVyMi5hZGRUYXNrKHRhc2syKTtcbnRlc3RGb2xkZXIyLmFkZFRhc2sodGFzazEpO1xudGVzdEZvbGRlcjIuYWRkVGFzayh0YXNrMyk7XG50ZXN0Rm9sZGVyMi5kZWxldGVUYXNrKHRhc2syKTtcbnN1cGVyRm9sZGVyLmFkZEZvbGRlcih0ZXN0Rm9sZGVyMik7XG5hcHBlbmRGb2xkZXIodGVzdEZvbGRlcjIpO1xuXG5jb25zb2xlLmxvZyh0ZXN0Rm9sZGVyMik7XG5cbmV4cG9ydCB7XG4gICAgZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQsXG4gICAgZGVsZXRlRm9sZGVyV2l0aElkLFxuICAgIGRlbGV0ZVRhc2tXaXRoSWQsXG4gICAgY2hhbmdlVGFza1N0YXR1cyxcbiAgICBnZXRUYXNrRGlhbG9nLFxuICAgIGZpbmRUYXNrV2l0aElkLFxuICAgIGdldEVkaXREaWFsb2dcbn0iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyYW5kb21VVUlEIiwiY3J5cHRvIiwiYmluZCIsImdldFJhbmRvbVZhbHVlcyIsInJuZHM4IiwiVWludDhBcnJheSIsInJuZyIsIkVycm9yIiwiYnl0ZVRvSGV4IiwiaSIsInB1c2giLCJ0b1N0cmluZyIsInNsaWNlIiwib3B0aW9ucyIsImJ1ZiIsIm9mZnNldCIsInJuZHMiLCJyYW5kb20iLCJhcnIiLCJ1bnNhZmVTdHJpbmdpZnkiLCJUYXNrIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsIm15VGFza1V1aWQiLCJjb21wbGV0ZVN0YXRlIiwiZ2V0Q29tcGxldGVTdGF0ZSIsImNoYW5nZVByaW9yaXR5IiwibmV3UHJpb3JpdHkiLCJzZXRDb21wbGV0ZSIsImVkaXRUYXNrIiwibmV3VGl0bGUiLCJuZXdEZXNjcmlwdGlvbiIsIm5ld0R1ZURhdGUiLCJwcmludFRhc2siLCJjb25zb2xlIiwibG9nIiwiRm9sZGVyIiwibXlGb2xkZXJVdWlkIiwidGFza3MiLCJhZGRUYXNrIiwibmV3VGFza05hbWUiLCJkaXNwbGF5VGFza3MiLCJsZW5ndGgiLCJkZWxldGVUYXNrIiwidGFza05hbWUiLCJzcGxpY2UiLCJkaXNwbGF5Rm9sZGVyVGFza3MiLCJmb2xkZXJOYW1lIiwiZm9yRWFjaCIsInRhc2siLCJsb2NhdGlvbiIsInRhc2tET00iLCJ0YXNrRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGFza1RpdGxlSW5EaXYiLCJ0YXNrRGVzY3JpcHRpb25JbkRpdiIsInRhc2tEdWVEYXRlSW5EaXYiLCJ0YXNrUHJpb3JpdHlJbkRpdiIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJ0YXNrRGVsZXRlQnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0aGlzQnV0dG9uIiwidGFyZ2V0IiwiZGVsZXRlVGFza1dpdGhJZCIsInZhbHVlIiwicGFyZW50Tm9kZSIsInJlbW92ZSIsImNyZWF0ZVRhc2tEZWxldGVCdXR0b24iLCJ0YXNrRWRpdEJ0biIsImVkaXRGb3JtIiwiZ2V0RWxlbWVudEJ5SWQiLCJidG5Gb3JJZCIsImZvcm0iLCJ0YXNrVGl0bGVJbkZvcm0iLCJlbGVtZW50cyIsInRhc2tEZXNjcmlwdGlvbkluRm9ybSIsInRhc2tEdWVEYXRlSW5Gb3JtIiwidGFza1ByaW9yaXR5SW5Gb3JtIiwiY2hhbmdlVGFza0Zvcm1GaWVsZHMiLCJmaW5kVGFza1dpdGhJZCIsImdldEVkaXREaWFsb2ciLCJzaG93TW9kYWwiLCJjcmVhdGVUYXNrRWRpdEJ1dHRvbiIsInRhc2tTdGF0dXNCdG4iLCJlbGVtZW50IiwiY2hhbmdlVGFza1N0YXR1cyIsImNvbnRhaW5zIiwiY3JlYXRlVGFza1N0YXR1c0J1dHRvbiIsImNyZWF0ZVRhc2tFbGVtZW50IiwiYXBwZW5kVGFzayIsImFwcGVuZEZvbGRlciIsImZvbGRlckRPTSIsInNpZGViYXIiLCJxdWVyeVNlbGVjdG9yIiwiZm9sZGVyRGl2IiwiZm9sZGVyQnRuIiwiZm9sZGVyIiwiZm9sZGVyRGVsZXRlQnRuIiwiZGVsZXRlRm9sZGVyV2l0aElkIiwiY3JlYXRlRm9sZGVyRGVsZXRlQnV0dG9uIiwiY3VycmVudEZvbGRlcklkIiwiZGlzcGxheUN1cnJlbnRGb2xkZXJXaXRoSWQiLCJjcmVhdGVGb2xkZXJCdXR0b24iLCJzdXBlckZvbGRlciIsImZvbGRlcnMiLCJhZGRGb2xkZXIiLCJuZXdGb2xkZXJOYW1lIiwiZGVsZXRlRm9sZGVyIiwiU3VwZXJGb2xkZXIiLCJnZXRUYXNrRGlhbG9nIiwidGVtcElkIiwiYnV0dG9uSWQiLCJ0YXNrSWQiLCJvdXRwdXQiLCJyZXNldCIsInNlbGVjdCIsInNlbGVjdE9wdGlvbiIsImNsZWFyU2VsZWN0TWVudSIsIm9wdGlvbiIsImFwcGVuZERyb3Bkb3duIiwicHJldmVudERlZmF1bHQiLCJmb2xkZXJEaWFsb2ciLCJmb2xkZXJUaXRsZUluRm9ybSIsImZvbGRlckZvcm0iLCJnZXRGb2xkZXJGb3JtSW5mbyIsIm5ld0ZvbGRlciIsImNsb3NlIiwic2VsZWN0ZWRGb2xkZXJWYWx1ZSIsInRhc2tUaXRsZSIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tEdWVEYXRlIiwidGFza1ByaW9yaXR5IiwiZ2V0VGFza0Zvcm1JbmZvIiwibmV3VGFzayIsImJ0bklkIiwiZ2V0VGFza0VkaXRGb3JtSW5mbyIsInRhc2sxIiwidGFzazIiLCJ0YXNrMyIsImluYm94Rm9sZGVyIiwidGVzdEZvbGRlcjIiXSwic291cmNlUm9vdCI6IiJ9