(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{H:()=>y});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));const a=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const a=(e=e||{}).random||(e.rng||d)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=a[e];return n}return function(e,t=0){return r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]}(a)};function l(e,t,n,o){let d=!1;e=e.toString(),t=t.toString();const r=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:()=>d,setComplete:()=>{d=!0},changePriority:r,editTask:(o,d,a,l)=>{e=o,t=d,n=a,r(l)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)}}}function i(e){let t=a(),n=[];return{title:e,tasks:n,myuuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{n.splice(e,1)}}}function s(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return document.createElement,n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myuuid,n.appendChild(o),t.appendChild(n),o.addEventListener("click",y),n}(e);document.querySelector(".sidebar").appendChild(t)}const c=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{e.splice(t,1)}}}(),u=i("Inbox");console.log("Inbox Folder ID is "+u.myuuid);const m=l("chores","wash dishes","nov 23","high"),p=l("movies","avatar","nov 29","med"),f=l("coding","todo list","dec 10","low");function y(){let e=this.value;c.folders.forEach((t=>{e===t.myuuid&&(document.getElementById("task-container").textContent="",t.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),r=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,r.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(r),t}(e);document.getElementById(t).appendChild(n)}(e,["task-container"])})),console.log("match found"))}))}m.editTask("new thing","another new thing","new date","HIGH"),u.addTask(f),u.addTask(p),u.addTask(m),u.displayTasks(),c.addFolder(u),console.log(c),document.getElementById("open-task-modal-btn").addEventListener("click",(function(){document.getElementById("task-dialog").showModal()})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=i(n);s(o),c.addFolder(o),console.log(c.folders),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(){const{taskTitle:e,taskDescription:t,taskDueDate:n,taskPriority:o}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),d=l(e,t,n,o);c.folders.forEach((e=>{temperId===e.myuuid&&e.addTask(d)})),console.log(d.printTask())}));let g=i("test");g.addTask(m),c.addFolder(g),s(g);let k=i("test2");k.addTask(p),c.addFolder(k),s(k)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,