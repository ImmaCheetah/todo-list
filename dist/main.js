(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>h,F5:()=>v,k3:()=>E,HA:()=>g,QP:()=>U,mo:()=>p,qQ:()=>y});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));const l=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const l=(e=e||{}).random||(e.rng||d)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=l[e];return n}return function(e,t=0){return r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]}(l)};function a(e,t,n,o,d=l()){let r=!1;const a=()=>r;e=e.toString(),t=t.toString();const s=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:a,setComplete:()=>{r=0==a()},changePriority:s,editTask:(o,d,r,l)=>{e=o,t=d,n=r,s(l)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function s(e,t=l()){let n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function i(e=l()){let t=[];return{folders:t,addFolder:e=>{t.push(e)},deleteFolder:e=>{for(let n=t.length-1;n>=0;--n)t[n].myFolderUuid===e.myFolderUuid&&t.splice(n,1);localStorage.removeItem(e.myFolderUuid)},mySuperFolderUuid:e}}function c(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),r=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,r.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(r),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;E(t.value),t.parentNode.remove(),y()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(e){const t=document.getElementById("edit-form"),n=document.createElement("button");n.classList.add("edit-btn-id"),n.value=e.target.value,t.appendChild(n),function(e){const t=document.getElementById("edit-form"),n=t.elements["task-title"],o=t.elements["task-description"],d=t.elements["task-due-date"],r=t.elements["task-priority"];n.value=e.title,o.value=e.description,d.value=e.dueDate,r.value=e.priority}(U(e.target.value)),p().showModal()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;var n;h(t.value),(n=t).parentNode.classList.contains("complete-task")?n.parentNode.classList.remove("complete-task"):n.parentNode.classList.add("complete-task")})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function u(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;v(t.value),t.parentNode.remove(),y()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return g(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);const n=document.querySelector(".sidebar"),o=document.querySelector(".inbox-div");"inboxFolder"===e.myFolderUuid?o.appendChild(t):n.appendChild(t)}let m=i("123456");function f(){return document.getElementById("task-dialog")}function p(){return document.getElementById("edit-dialog")}function k(e){const{mySuperFolderUuid:t}=e;return m=i(t),e.folders.forEach((e=>{m.addFolder(function(e){const{title:t,myFolderUuid:n}=e;let o=s(t,n);return e.tasks.forEach((e=>{o.addTask(function(e){const{title:t,description:n,dueDate:o,priority:d,myTaskUuid:r}=e;return a(t,n,o,d,r)}(e))})),o}(e))})),console.log("from recreate super folder function",m),m}function y(){localStorage.setItem("folders",JSON.stringify(m))}function g(e){m.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",c(t),console.log("match found"))}))}function v(e){m.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),m.deleteFolder(t))}))}function E(e){m.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function h(e){m.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))}))}function U(e){let t;return m.folders.forEach((n=>{n.tasks.forEach((n=>{e===n.myTaskUuid&&(t=n)}))})),t}document.getElementById("open-task-modal-btn").addEventListener("click",(function(){f().reset,f().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(JSON.parse(localStorage.getItem("folders")))})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=s(n);u(o),m.addFolder(o),localStorage.setItem("folders",JSON.stringify(m)),k(JSON.parse(localStorage.getItem("folders"))),t.close()})),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:r}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),l=a(n,o,d,r);m.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(l)})),localStorage.setItem("folders",JSON.stringify(m)),k(JSON.parse(localStorage.getItem("folders"))),g(t),document.getElementById("main-form").reset(),f().close()})),document.getElementById("task-edit-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".edit-btn-id"),{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:r}=function(){const e=document.getElementById("edit-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}();m.folders.forEach((e=>{e.tasks.forEach((l=>{t.value===l.myTaskUuid&&(l.editTask(n,o,d,r),g(e.myFolderUuid),console.log(l))}))})),t.remove(),p().close()})),function(){if(localStorage.getItem("folders")){let e=JSON.parse(localStorage.getItem("folders"));k(e),m.folders.forEach((e=>{u(e)})),console.log("Inside of loading preset, after displaying",e)}else{const e=a("chores","wash dishes","nov 23","high"),t=a("movies","avatar","nov 29","med"),n=a("coding","todo list","dec 10","low");let o=s("Inbox","inboxFolder");o.addTask(e),m.addFolder(o),u(o);let d=s("test2");d.addTask(t),d.addTask(e),d.addTask(n),d.deleteTask(t),m.addFolder(d),u(d),console.log("else stuf happened")}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,