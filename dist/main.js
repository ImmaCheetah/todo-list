(()=>{"use strict";const e={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let t;const n=new Uint8Array(16);function o(){if(!t&&(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!t))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(n)}const d=[];for(let e=0;e<256;++e)d.push((e+256).toString(16).slice(1));const r=function(t,n,r){if(e.randomUUID&&!n&&!t)return e.randomUUID();const l=(t=t||{}).random||(t.rng||o)();if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,n){r=r||0;for(let e=0;e<16;++e)n[r+e]=l[e];return n}return function(e,t=0){return d[e[t+0]]+d[e[t+1]]+d[e[t+2]]+d[e[t+3]]+"-"+d[e[t+4]]+d[e[t+5]]+"-"+d[e[t+6]]+d[e[t+7]]+"-"+d[e[t+8]]+d[e[t+9]]+"-"+d[e[t+10]]+d[e[t+11]]+d[e[t+12]]+d[e[t+13]]+d[e[t+14]]+d[e[t+15]]}(l)};function l(e,t,n,o){let d=!1;e=e.toString(),t=t.toString();const r=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:()=>d,setComplete:()=>{d=!0},changePriority:r,editTask:(o,d,l,i)=>{e=o,t=d,n=l,r(i)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)}}}function i(e){let t=r(),n=[];return{title:e,tasks:n,myuuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{n.splice(e,1)}}}const s=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{e.splice(t,1)}}}(),a=i("Inbox");console.log("Inbox Folder ID is "+a.myuuid);const c=l("chores","wash dishes","nov 23","high"),u=l("movies","avatar","nov 29","med"),m=l("coding","todo list","dec 10","low");c.editTask("new thing","another new thing","new date","HIGH"),a.addTask(m),a.addTask(u),a.addTask(c),a.displayTasks(),s.addFolder(a),console.log(s);const p=document.getElementById("task-add-btn");document.getElementById("task-dialog").show(),p.addEventListener("click",(function(){const{taskTitle:e,taskDescription:t,taskDueDate:n,taskPriority:o}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),d=l(e,t,n,o);console.log(d.printTask())})),a.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),r=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,r.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(r),t}(e);document.getElementById(t).appendChild(n)}(e,["task-container"])})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();!function(e){let t=function(e){const t=document.querySelector(".folders-div"),n=document.createElement("button");return n.classList.add("folder-button"),n.textContent=e,t.appendChild(n),t}(e);document.querySelector(".sidebar").appendChild(t)}(n);let o=i(n);s.addFolder(o),console.log(s.folders),t.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,