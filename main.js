(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{kj:()=>g,F5:()=>k,k3:()=>y,HA:()=>p,QP:()=>v,mo:()=>f});const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function d(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const l=[];for(let e=0;e<256;++e)l.push((e+256).toString(16).slice(1));const r=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const r=(e=e||{}).random||(e.rng||d)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=r[e];return n}return function(e,t=0){return l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]}(r)};function a(e,t,n,o){let d=r(),l=!1;const a=()=>l;e=e.toString(),t=t.toString();const s=e=>{o=e};return{get title(){return e},get description(){return t},get dueDate(){return n},get priority(){return o},getCompleteState:a,setComplete:()=>{l=0==a()},changePriority:s,editTask:(o,d,l,r)=>{e=o,t=d,n=l,s(r)},printTask:()=>{console.log(`Task title - ${e}, Desc - ${t}, Date - ${n}, Priority - ${o}`)},myTaskUuid:d}}function s(e){let t=r(),n=[];return{title:e,tasks:n,myFolderUuid:t,addTask:e=>{n.push(e)},displayTasks:()=>{for(let e=0;e<n.length;e++)console.log(`Task ${e} - ${n[e].title}, ${n[e].dueDate}, ${n[e].priority}`)},deleteTask:e=>{for(let t=n.length-1;t>=0;--t)n[t].myTaskUuid===e.myTaskUuid&&n.splice(t,1)}}}function i(e){e.tasks.forEach((e=>{!function(e,t){let n=function(e){const t=document.createElement("div"),n=document.createElement("p"),o=document.createElement("p"),d=document.createElement("p"),l=document.createElement("p");return t.classList.add("task-div"),n.textContent=e.title,o.textContent=e.description,d.textContent=e.dueDate,l.textContent=e.priority,t.appendChild(n),t.appendChild(o),t.appendChild(d),t.appendChild(l),(function(e){const t=document.createElement("button");return t.classList.add("task-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;y(t.value),t.parentNode.remove()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-edit-btn"),t.textContent="+",e.appendChild(t),t.addEventListener("click",(function(e){const t=document.getElementById("edit-form"),n=document.createElement("button");n.classList.add("edit-btn-id"),n.value=e.target.value,t.appendChild(n),function(e){const t=document.getElementById("edit-form"),n=t.elements["task-title"],o=t.elements["task-description"],d=t.elements["task-due-date"],l=t.elements["task-priority"];n.value=e.title,o.value=e.description,d.value=e.dueDate,l.value=e.priority}(v(e.target.value)),f().showModal()})),t}(t)).value=e.myTaskUuid,(function(e){const t=document.createElement("button");return t.classList.add("task-status-btn"),t.textContent="âœ”",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;var n;g(t.value),(n=t).parentNode.classList.contains("complete-task")?n.parentNode.classList.remove("complete-task"):n.parentNode.classList.add("complete-task")})),t}(t)).value=e.myTaskUuid,t}(e);document.getElementById(["task-container"]).appendChild(n)}(e)}))}function c(e){let t=function(e){const t=document.querySelector(".sidebar"),n=document.createElement("div"),o=document.createElement("button");return n.classList.add("folder-div"),o.classList.add("folder-button"),o.textContent=e.title,o.value=e.myFolderUuid,n.appendChild(o),(function(e){const t=document.createElement("button");return t.classList.add("folder-delete-btn"),t.textContent="-",e.appendChild(t),t.addEventListener("click",(function(e){let t=e.target;k(t.value),t.parentNode.remove()})),t}(n)).value=e.myFolderUuid,t.appendChild(n),o.addEventListener("click",(function(){let t=e.myFolderUuid;return p(e.myFolderUuid),console.log(e.title,e.myFolderUuid),t})),n}(e);document.querySelector(".sidebar").appendChild(t)}const u=function(){let e=[];return{folders:e,addFolder:t=>{e.push(t)},deleteFolder:t=>{for(let n=e.length-1;n>=0;--n)e[n].myFolderUuid===t.myFolderUuid&&e.splice(n,1)}}}();function m(){return document.getElementById("task-dialog")}function f(){return document.getElementById("edit-dialog")}function p(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(document.getElementById("task-container").textContent="",i(t),console.log("match found"))}))}function k(e){u.folders.forEach((t=>{e===t.myFolderUuid&&(console.log(e),u.deleteFolder(t))}))}function y(e){u.folders.forEach((t=>{t.tasks.forEach((n=>{e===n.myTaskUuid&&t.deleteTask(n)}))}))}function g(e){u.folders.forEach((t=>{t.tasks.forEach((t=>{e===t.myTaskUuid&&t.setComplete()}))}))}function v(e){let t;return u.folders.forEach((n=>{n.tasks.forEach((n=>{e===n.myTaskUuid&&(t=n)}))})),t}document.getElementById("open-task-modal-btn").addEventListener("click",(function(){m().reset,m().showModal(),function(e){const t=document.getElementById("folder-selection");!function(e){for(let t=e.options.length;t>=0;t--)e.remove(0)}(t),e.folders.forEach((e=>{const n=document.createElement("option");n.textContent=e.title,n.value=e.myFolderUuid,t.appendChild(n)}))}(u)})),document.getElementById("folder-add-btn").addEventListener("click",(function(){document.getElementById("folder-dialog").showModal()})),document.getElementById("folder-confirm-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-dialog"),{folderTitleInForm:n}=function(){const e=document.getElementById("folder-form");return{folderForm:e,folderTitleInForm:e.elements["folder-title"].value}}();let o=s(n);c(o),u.addFolder(o),localStorage.setItem("folder",JSON.stringify(o)),console.log(JSON.parse(localStorage.getItem("folder"))),t.close()})),console.log(JSON.parse(localStorage.getItem("folder"))),document.getElementById("task-add-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.getElementById("folder-selection").value,{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("main-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}(),r=a(n,o,d,l);u.folders.forEach((e=>{t===e.myFolderUuid&&e.addTask(r)})),p(t),document.getElementById("main-form").reset(),m().close()})),document.getElementById("task-edit-btn").addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".edit-btn-id"),{taskTitle:n,taskDescription:o,taskDueDate:d,taskPriority:l}=function(){const e=document.getElementById("edit-form"),t=e.elements["task-title"],n=e.elements["task-description"],o=e.elements["task-due-date"],d=e.elements["task-priority"];return{taskTitle:t.value,taskDescription:n.value,taskDueDate:o.value,taskPriority:d.value}}();u.folders.forEach((e=>{e.tasks.forEach((r=>{t.value===r.myTaskUuid&&(r.editTask(n,o,d,l),p(e.myFolderUuid),console.log(r))}))})),t.remove(),f().close()}));const E=a("chores","wash dishes","nov 23","high"),h=a("movies","avatar","nov 29","med"),U=a("coding","todo list","dec 10","low");let I=s("Inbox");I.addTask(E),u.addFolder(I),c(I);let T=s("test2");T.addTask(h),T.addTask(E),T.addTask(U),T.deleteTask(h),u.addFolder(T),c(T),JSON.parse(localStorage.getItem("folder"))?console.log("a folder exists"):console.log("no folder")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,